# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000                  ORG $8000
  3   8000 31 00 00         LD SP, 0
  4   8003 3E 00            LD A, 0 ; VALOR INICIAL DE A
  5   8005 D3 FE            OUT ($FE), A ; COLOREA EL MARCO DE LA PANTALLA NEGRO
  6   8007 C3 58 A4         JP INICIO
  7   800A
  8   800A              ; CONSTANTES
  9   800A              CONTADOR EQU 255
 10   800A              NUM_FILAS EQU 24
 11   800A              NUM_COLS EQU 32
 12   800A
 13   800A              COLOR_TEXTO_AZUL EQU 1
 14   800A              COLOR_TEXTO_ROJO EQU 2
 15   800A              COLOR_TEXTO_AMARILLO EQU 6
 16   800A              BLINK EQU 128
 17   800A
 18   800A              ; INCLUDES
 19   800A                  INCLUDE "colors.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\colors.asm
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\colors.asm
 20   800A                  INCLUDE "variables.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\variables.asm
  1+  800A              PLAYER1 EQU 2
  2+  800A              PLAYER2 EQU 6
  3+  800A              NEGRO EQU 0
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\variables.asm
 21   800A                  INCLUDE "keyboard.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\keyboard.asm
  1+  800A              K_SON: ; LECTURA DE TECLADO PARA S O N
  2+  800A 0E FE            LD C, $FE
  3+  800C              KSON_BUCLE:
  4+  800C 06 FD            LD B, $FD
  5+  800E ED 78            IN A, (C)
  6+  8010 CB 4F            BIT 1, A
  7+  8012 28 0E            JR Z, KSON_S
  8+  8014
  9+  8014 06 7F            LD B, $7F
 10+  8016 ED 78            IN A, (C)
 11+  8018 CB 5F            BIT 3, A
 12+  801A 28 02            JR Z, KSON_N
 13+  801C
 14+  801C 20 EE            JR NZ, KSON_BUCLE
 15+  801E
 16+  801E              KSON_N:
 17+  801E 16 4E            LD D, "N"
 18+  8020 18 02            JR KSON_RELEASE
 19+  8022
 20+  8022              KSON_S:
 21+  8022 16 53            LD D, "S"
 22+  8024
 23+  8024              KSON_RELEASE:
 24+  8024 ED 78            IN A, (C)
 25+  8026 E6 1F            AND $1F
 26+  8028 FE 1F            CP $1F
 27+  802A 20 F8            JR NZ, KSON_RELEASE
 28+  802C
 29+  802C C9               RET ; FIN DE KSON
 30+  802D
 31+  802D
 32+  802D              K_LR_ENTER_F: ; LECTURA DE TECLADO PARA Q (LEFT) W (RIGHT) O ENTER (SOLTAR FICHA)
 33+  802D 0E FE            LD C, $FE
 34+  802F
 35+  802F              KLREF_BUCLE:
 36+  802F 06 FB            LD B, $FB
 37+  8031 ED 78            IN A, (C)
 38+  8033 CB 47            BIT 0, A
 39+  8035 28 16            JR Z, KLREF_Q
 40+  8037 CB 4F            BIT 1, A
 41+  8039 28 1F            JR Z, KLREF_W
 42+  803B
 43+  803B 06 BF            LD B, $BF
 44+  803D ED 78            IN A, (C)
 45+  803F CB 47            BIT 0, A
 46+  8041 28 1B            JR Z, KLREF_ENTER
 47+  8043
 48+  8043 06 FD            LD B, $FD
 49+  8045 ED 78            IN A, (C)
 50+  8047 CB 5F            BIT 3, A
 51+  8049 28 20            JR Z, KLREF_F
 52+  804B
 53+  804B 18 E2            JR KLREF_BUCLE
 54+  804D
 55+  804D              KLREF_Q:
 56+  804D 16 51            LD D, 'Q'
 57+  804F
 58+  804F              KLREF_RELEASE_QW:
 59+  804F 06 FB            LD B, $FB
 60+  8051 ED 78            IN A, (C)
 61+  8053 E6 1F            AND $1F
 62+  8055 FE 1F            CP $1F
 63+  8057 20 F6            JR NZ, KLREF_RELEASE_QW
 64+  8059 C9               RET
 65+  805A
 66+  805A              KLREF_W:
 67+  805A 16 57            LD D, 'W'
 68+  805C 18 F1            JR KLREF_RELEASE_QW
 69+  805E
 70+  805E              KLREF_ENTER:
 71+  805E 16 0D            LD D, 13 ; ASCII PARA ENTER EN ZXSPECTRUM48
 72+  8060
 73+  8060              KLREF_RELEASE_ENTER:
 74+  8060 06 BF            LD B, $BF
 75+  8062 ED 78            IN A, (C)
 76+  8064 E6 1F            AND $1F
 77+  8066 FE 1F            CP $1F
 78+  8068 20 F6            JR NZ, KLREF_RELEASE_ENTER
 79+  806A C9               RET ; FIN DE LECTURA Q W ENTER
 80+  806B
 81+  806B              KLREF_F:
 82+  806B 16 46            LD D, 'F'
 83+  806D
 84+  806D              KLREF_RELEASE_F:
 85+  806D 06 FD            LD B, $FD
 86+  806F ED 78            IN A, (C)
 87+  8071 E6 1F            AND $1F
 88+  8073 FE 1F            CP $1F
 89+  8075 20 F6            JR NZ, KLREF_RELEASE_F
 90+  8077 C9               RET
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\keyboard.asm
 22   8078                  INCLUDE "printat.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\printat.asm
  1+  8078              ; -------------------------------
  2+  8078              ; ZX Spectrum Text print library
  3+  8078              ; Daniel Le√≥n - AOC - UFV 2020
  4+  8078              ; -------------------------------
  5+  8078
  6+  8078
  7+  8078              ; ----------------------------------------------------------------------------------------
  8+  8078              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  8078              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  8078              ;		IN	B	: Row 0..23
 11+  8078              ;		IN	C	: Column 0..31
 12+  8078              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  8078              ; ----------------------------------------------------------------------------------------
 14+  8078 CD 87 80     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  807B              ; ----------------------------------------------------------------------------------------
 16+  807B              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  807B              ; ----------------------------------------------------------------------------------------
 18+  807B              ; PRINTSTR - Prints String - IX Points to the String start
 19+  807B              ; ----------------------------------------------------------------------------------------
 20+  807B DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  807E B7           			OR A						; check for end of string (0)
 22+  807F C8           			RET Z						; Finish printing if 0
 23+  8080 CD B5 80     			CALL PRINTCHNUM
 24+  8083 DD 23        			INC IX						; Move to next char in string
 25+  8085 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  8087              ; ----------------------------------------------------------------------------------------
 27+  8087
 28+  8087
 29+  8087              ;-----------------------------------------------------------------------------------------
 30+  8087              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  8087              ;-----------------------------------------------------------------------------------------
 32+  8087 32 FB 80     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  808A CD 90 80     PREP_PRT_2:	CALL CRtoSCREEN
 34+  808D C3 A2 80     			JP CRtoATTR
 35+  8090              ;-----------------------------------------------------------------------------------------
 36+  8090
 37+  8090              ;-----------------------------------------------------------------------------------------
 38+  8090              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  8090              ;	IN  - B=Row, C=Column
 40+  8090              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  8090              ;	Conversion:
 42+  8090              ;			Row FFfff   Column CCCCC
 43+  8090              ;			HL=%010FF000 fffCCCCC
 44+  8090              ;-----------------------------------------------------------------------------------------
 45+  8090              CRtoSCREEN:
 46+  8090 78           			LD A,B						; %___FFfff
 47+  8091 F6 40        			OR #40						; %010FFfff
 48+  8093 E6 F8        			AND #F8						; %010FF000
 49+  8095 67           			LD H,A
 50+  8096
 51+  8096 78           			LD A,B						; %___FFfff
 52+  8097 E6 07        			AND #7						; %00000fff
 53+  8099 0F           			RRCA						; %f00000ff
 54+  809A 0F           			RRCA						; %ff00000f
 55+  809B 0F           			RRCA						; %fff00000
 56+  809C B1           			OR C						; %fffCCCCC
 57+  809D 6F           			LD L,A
 58+  809E 22 F7 80                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  80A1 C9                       RET
 60+  80A2              ; ----------------------------------------------------------------------------------------
 61+  80A2
 62+  80A2
 63+  80A2
 64+  80A2              ;-----------------------------------------------------------------------------------------
 65+  80A2              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  80A2              ;	IN  - B=Row, C=Column
 67+  80A2              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  80A2              ;	Conversion:
 69+  80A2              ;			Row FFfff   Column CCCCC
 70+  80A2              ;			HL=%010110FF fffCCCCC
 71+  80A2              ;-----------------------------------------------------------------------------------------
 72+  80A2              CRtoATTR:
 73+  80A2 78           			LD A,B						; %___FFfff
 74+  80A3 0F           			RRCA						; %f000FFff
 75+  80A4 0F           			RRCA						; %ff000FFf
 76+  80A5 0F           			RRCA						; %fff000FF
 77+  80A6 6F           			LD L,A
 78+  80A7 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  80A9 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  80AB 67           			LD H,A
 81+  80AC
 82+  80AC 7D           			LD A,L						; %fff000FF
 83+  80AD E6 E0        			AND #E0						; %fff00000
 84+  80AF B1           			OR C						; %fffCCCCC
 85+  80B0 6F           			LD L,A
 86+  80B1
 87+  80B1 22 F9 80                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  80B4 C9                       RET
 89+  80B5              ; ----------------------------------------------------------------------------------------
 90+  80B5
 91+  80B5
 92+  80B5
 93+  80B5              ; ----------------------------------------------------------------------------------------
 94+  80B5              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  80B5              ;-----------------------------------------------------------------------------------------
 96+  80B5              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  80B5 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  80B7 6F           			LD L,A
 99+  80B8 29           			ADD HL,HL
100+  80B9 29           			ADD HL,HL
101+  80BA 29           			ADD HL,HL
102+  80BB 11 FC 7F     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  80BE 19           			ADD HL,DE
104+  80BF EB           			EX  DE,HL					;Value in DE
105+  80C0              			; Continues to printchar below
106+  80C0              ; ----------------------------------------------------------------------------------------
107+  80C0
108+  80C0
109+  80C0              ; ----------------------------------------------------------------------------------------
110+  80C0              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  80C0              ; ----------------------------------------------------------------------------------------
112+  80C0              PRINTCHAR:
113+  80C0 06 08        			LD B,8						; 8 Lines per char
114+  80C2 2A F7 80                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  80C5
116+  80C5 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  80C6 77           			LD (HL),A					; Move to Printing location
118+  80C7 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  80C8 13                       INC DE 						; next line to be printed
120+  80C9 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  80CB 3A FB 80                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  80CE 2A F9 80                 LD HL, (SCR_ATTR_PTR)
123+  80D1 77                       LD (HL),A
124+  80D2 21 F9 80                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  80D5 34                       INC (HL)					; Move Attribute cursor to next char
126+  80D6 21 F7 80     			LD HL, SCR_CUR_PTR
127+  80D9 34           			INC (HL)					; update Cursor pointer to next position
128+  80DA C9                       RET
129+  80DB              ; ----------------------------------------------------------------------------------------
130+  80DB
131+  80DB
132+  80DB
133+  80DB              ; ----------------------------------------------------------------------------------------
134+  80DB              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  80DB              ; 				Sets bright 1 and flash 0
136+  80DB              ; ----------------------------------------------------------------------------------------
137+  80DB 3A FB 80     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  80DE E6 07                    AND 7						; get Attr INK in A
139+  80E0 07           			RLCA
140+  80E1 07           			RLCA
141+  80E2 07           			RLCA						; move Ink to Paper
142+  80E3 F6 40        			OR 64						; ink 0 bright 1
143+  80E5 32 FB 80     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  80E8 C9           			RET
145+  80E9              ; ----------------------------------------------------------------------------------------
146+  80E9
147+  80E9
148+  80E9
149+  80E9
150+  80E9 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  80EC 11 01 40     			LD DE,$4001
152+  80EF 01 FF 1A     			LD BC,6911
153+  80F2 36 00        			LD (HL),0
154+  80F4 ED B0        			LDIR
155+  80F6 C9           			RET
156+  80F7
157+  80F7
158+  80F7              SCR_CUR_PTR
158+  80F7 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  80F9 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  80FB 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  80FC
162+  80FC              CHARSET: incbin "charset.bin"			; Charset used
163+  83FC
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\printat.asm
 23   83FC                  INCLUDE "graphics_basic.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_basic.asm
  1+  83FC              ; STRINGS PARA IMPRESION
  2+  83FC
  3+  83FC 20 20 20 20  STRING_FILA_VACIA_B: DB "                        ", 0
  3+  8400 20 20 20 20
  3+  8404 20 20 20 20
  3+  8408 20 20 20 20
  3+  840C 20 20 20 20
  3+  8410 20 20 20 20
  3+  8414 00
  4+  8415 20 42 69 65  STRING_BIENVENIDA: DB " Bienvenido a Conecta 4 ", 0
  4+  8419 6E 76 65 6E
  4+  841D 69 64 6F 20
  4+  8421 61 20 43 6F
  4+  8425 6E 65 63 74
  4+  8429 61 20 34 20
  4+  842D 00
  5+  842E 20 51 75 69  STRING_JUGAR: DB " Quieres jugar? S/N:   ", 0
  5+  8432 65 72 65 73
  5+  8436 20 6A 75 67
  5+  843A 61 72 3F 20
  5+  843E 53 2F 4E 3A
  5+  8442 20 20 20 00
  6+  8446 20 20 20 20  STRING_FILA_VACIA_J: DB "                       ", 0
  6+  844A 20 20 20 20
  6+  844E 20 20 20 20
  6+  8452 20 20 20 20
  6+  8456 20 20 20 20
  6+  845A 20 20 20 00
  7+  845E 20 20 20 20  STRING_FILA_VACIA_A: DB "            ", 0
  7+  8462 20 20 20 20
  7+  8466 20 20 20 20
  7+  846A 00
  8+  846B 20 20 41 44  STRING_ADIOS: DB "  ADIOS!!!! ", 0
  8+  846F 49 4F 53 21
  8+  8473 21 21 21 20
  8+  8477 00
  9+  8478 20 4C 41 20  STRING_FIN: DB " LA PARTIDA HA FINALIZADO ", 0
  9+  847C 50 41 52 54
  9+  8480 49 44 41 20
  9+  8484 48 41 20 46
  9+  8488 49 4E 41 4C
  9+  848C 49 5A 41 44
  9+  8490 4F 20 00
 10+  8493 20 51 55 49  STRING_OTRA: DB " QUIERES JUGAR OTRA VEZ? S/N:   ", 0
 10+  8497 45 52 45 53
 10+  849B 20 4A 55 47
 10+  849F 41 52 20 4F
 10+  84A3 54 52 41 20
 10+  84A7 56 45 5A 3F
 10+  84AB 20 53 2F 4E
 10+  84AF 3A 20 20 20
 10+  84B3 00
 11+  84B4 00 00        CHAR_CARACTER: DB 0, 0
 12+  84B6
 13+  84B6              ; PANTALLA DE INICIO
 14+  84B6              PANTALLA_BIENVENIDA: INCBIN "connect4screen.SCR"
 15+  9FB6                  INCLUDE "pantalla_juego.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\pantalla_juego.asm
  1++ 9FB6              SCR_PTLLA_JUEGO:
  2++ 9FB6 C5               PUSH BC
  2++ 9FB7 E5             PUSH HL
  2++ 9FB8 D5             PUSH DE
  2++ 9FB9 F5             PUSH AF
  3++ 9FBA 3E 00            LD A, 0
  4++ 9FBC                  ; LD HL, $0405
  5++ 9FBC                  ; CALL COORD_ATRIB
  6++ 9FBC 21 A5 58         LD HL, $58A5
  7++ 9FBF CD CD 9F         CALL SET_GRID_EMPTY
  8++ 9FC2 21 A5 40         LD HL, $40A5
  9++ 9FC5 CD E3 9F         CALL DRAW_EMPTY_CIRCLES
 10++ 9FC8 F1               POP AF
 10++ 9FC9 D1             POP DE
 10++ 9FCA E1             POP HL
 10++ 9FCB C1             POP BC
 11++ 9FCC C9               RET
 12++ 9FCD
 13++ 9FCD              SET_GRID_EMPTY:
 14++ 9FCD CD 5C A0         CALL SET_COLUMN_COLOR
 15++ 9FD0 CD 5C A0         CALL SET_COLUMN_COLOR
 16++ 9FD3 CD 5C A0         CALL SET_COLUMN_COLOR
 17++ 9FD6 CD 5C A0         CALL SET_COLUMN_COLOR
 18++ 9FD9 CD 5C A0         CALL SET_COLUMN_COLOR
 19++ 9FDC CD 5C A0         CALL SET_COLUMN_COLOR
 20++ 9FDF CD 5C A0         CALL SET_COLUMN_COLOR
 21++ 9FE2 C9               RET
 22++ 9FE3
 23++ 9FE3              DRAW_EMPTY_CIRCLES:
 24++ 9FE3 CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 25++ 9FE6 CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 26++ 9FE9 CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 27++ 9FEC CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 28++ 9FEF CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 29++ 9FF2 CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 30++ 9FF5 CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 31++ 9FF8 CD 32 A0         CALL DRAW_CIRCLE_COLUMN
 32++ 9FFB C9               RET
 33++ 9FFC
 34++ 9FFC              DRAW_CIRCLE_ROW:
 35++ 9FFC E5               PUSH HL
 36++ 9FFD CD 73 A0         CALL DRAW_CIRCLE
 37++ A000 E1               POP HL
 37++ A001 23             INC HL
 37++ A002 23             INC HL
 37++ A003 23             INC HL
 37++ A004 E5             PUSH HL
 38++ A005 CD 73 A0         CALL DRAW_CIRCLE
 39++ A008 E1               POP HL
 39++ A009 23             INC HL
 39++ A00A 23             INC HL
 39++ A00B 23             INC HL
 39++ A00C E5             PUSH HL
 40++ A00D CD 73 A0         CALL DRAW_CIRCLE
 41++ A010 E1               POP HL
 41++ A011 23             INC HL
 41++ A012 23             INC HL
 41++ A013 23             INC HL
 41++ A014 E5             PUSH HL
 42++ A015 CD 73 A0         CALL DRAW_CIRCLE
 43++ A018 E1               POP HL
 43++ A019 23             INC HL
 43++ A01A 23             INC HL
 43++ A01B 23             INC HL
 43++ A01C E5             PUSH HL
 44++ A01D CD 73 A0         CALL DRAW_CIRCLE
 45++ A020 E1               POP HL
 45++ A021 23             INC HL
 45++ A022 23             INC HL
 45++ A023 23             INC HL
 45++ A024 E5             PUSH HL
 46++ A025 CD 73 A0         CALL DRAW_CIRCLE
 47++ A028 E1               POP HL
 47++ A029 23             INC HL
 47++ A02A 23             INC HL
 47++ A02B 23             INC HL
 47++ A02C E5             PUSH HL
 48++ A02D CD 73 A0         CALL DRAW_CIRCLE
 49++ A030 E1               POP HL
 50++ A031 C9               RET
 51++ A032
 52++ A032              DRAW_CIRCLE_COLUMN:
 53++ A032 CD 73 A0         CALL DRAW_CIRCLE
 54++ A035 CD 73 A0         CALL DRAW_CIRCLE
 55++ A038 CD 73 A0         CALL DRAW_CIRCLE
 56++ A03B CD 73 A0         CALL DRAW_CIRCLE
 57++ A03E CD 73 A0         CALL DRAW_CIRCLE
 58++ A041 CD 73 A0         CALL DRAW_CIRCLE
 59++ A044 01 C3 EF         LD BC, $EFC3
 60++ A047 09               ADD HL, BC
 61++ A048 C9               RET
 62++ A049
 63++ A049              VERIFY_4000:
 64++ A049 3E 41            LD A, $41
 65++ A04B BC               CP H
 66++ A04C CC 56 A0         CALL Z, SET_4800
 67++ A04F 3E 49            LD A, $49
 68++ A051 BC               CP H
 69++ A052 CC 59 A0         CALL Z, SET_5000
 70++ A055 C9               RET
 71++ A056
 72++ A056              SET_4800:
 73++ A056 26 48            LD H, $48
 74++ A058 C9               RET
 75++ A059
 76++ A059              SET_5000:
 77++ A059 26 50            LD H, $50
 78++ A05B C9               RET
 79++ A05C
 80++ A05C              SET_COLUMN_COLOR:
 81++ A05C CD 02 A2         CALL SET_C_COLOR_E
 82++ A05F CD 02 A2         CALL SET_C_COLOR_E
 83++ A062 CD 02 A2         CALL SET_C_COLOR_E
 84++ A065 CD 02 A2         CALL SET_C_COLOR_E
 85++ A068 CD 02 A2         CALL SET_C_COLOR_E
 86++ A06B CD 02 A2         CALL SET_C_COLOR_E
 87++ A06E 01 C3 FD         LD BC, $FDC3
 88++ A071 09               ADD HL, BC
 89++ A072 C9               RET
 90++ A073
 91++ A073              DRAW_CIRCLE:
 92++ A073 C5               PUSH BC
 93++ A074 01 1D 00         LD BC, $001D
 94++ A077
 95++ A077 CD A0 A0         CALL UL_CIRCLE
 96++ A07A CD C6 A0         CALL UM_CIRCLE
 97++ A07D CD E9 A0         CALL UR_CIRCLE
 98++ A080
 99++ A080 09               ADD HL, BC
100++ A081 CD 49 A0         CALL VERIFY_4000
101++ A084
102++ A084 CD 0F A1         CALL ML_CIRCLE
103++ A087 CD 32 A1         CALL MM_CIRCLE
104++ A08A CD 51 A1         CALL MR_CIRCLE
105++ A08D
106++ A08D 09               ADD HL, BC
107++ A08E CD 49 A0         CALL VERIFY_4000
108++ A091
109++ A091 CD 74 A1         CALL LL_CIRCLE
110++ A094 CD 9A A1         CALL LM_CIRCLE
111++ A097 CD BD A1         CALL LR_CIRCLE
112++ A09A
113++ A09A 09               ADD HL, BC
114++ A09B CD 49 A0         CALL VERIFY_4000
115++ A09E C1               POP BC
116++ A09F
117++ A09F C9               RET
118++ A0A0
119++ A0A0              UL_CIRCLE:
120++ A0A0 3E 00            LD A, %00000000
121++ A0A2 77               LD (HL), A
122++ A0A3 CD E3 A1         CALL INC_AND_LOAD_H
123++ A0A6 3E 03            LD A, %00000011
124++ A0A8 CD E3 A1         CALL INC_AND_LOAD_H
125++ A0AB 3E 07            LD A, %00000111
126++ A0AD CD E3 A1         CALL INC_AND_LOAD_H
127++ A0B0 3E 0F            LD A, %00001111
128++ A0B2 CD E3 A1         CALL INC_AND_LOAD_H
129++ A0B5 3E 1F            LD A, %00011111
130++ A0B7 CD E3 A1         CALL INC_AND_LOAD_H
131++ A0BA 3E 3F            LD A, %00111111
132++ A0BC CD E3 A1         CALL INC_AND_LOAD_H
133++ A0BF CD E3 A1         CALL INC_AND_LOAD_H
134++ A0C2 CD ED A1         CALL SETBACK_HL
135++ A0C5 C9               RET
136++ A0C6
137++ A0C6              UM_CIRCLE:
138++ A0C6 3E 00            LD A, %00000000
139++ A0C8 25               DEC H
140++ A0C9 CD E3 A1         CALL INC_AND_LOAD_H
141++ A0CC 3E 7E            LD A, %01111110
142++ A0CE CD E3 A1         CALL INC_AND_LOAD_H
143++ A0D1 3E FF            LD A, %11111111
144++ A0D3 CD E3 A1         CALL INC_AND_LOAD_H
145++ A0D6 CD E3 A1         CALL INC_AND_LOAD_H
146++ A0D9 CD E3 A1         CALL INC_AND_LOAD_H
147++ A0DC CD E3 A1         CALL INC_AND_LOAD_H
148++ A0DF CD E3 A1         CALL INC_AND_LOAD_H
149++ A0E2 CD E3 A1         CALL INC_AND_LOAD_H
150++ A0E5 CD ED A1         CALL SETBACK_HL
151++ A0E8 C9               RET
152++ A0E9
153++ A0E9              UR_CIRCLE:
154++ A0E9 3E 00            LD A, %00000000
155++ A0EB 77               LD (HL), A
156++ A0EC CD E3 A1         CALL INC_AND_LOAD_H
157++ A0EF 3E C0            LD A, %11000000
158++ A0F1 CD E3 A1         CALL INC_AND_LOAD_H
159++ A0F4 3E E0            LD A, %11100000
160++ A0F6 CD E3 A1         CALL INC_AND_LOAD_H
161++ A0F9 3E F0            LD A, %11110000
162++ A0FB CD E3 A1         CALL INC_AND_LOAD_H
163++ A0FE 3E F8            LD A, %11111000
164++ A100 CD E3 A1         CALL INC_AND_LOAD_H
165++ A103 3E FC            LD A, %11111100
166++ A105 CD E3 A1         CALL INC_AND_LOAD_H
167++ A108 CD E3 A1         CALL INC_AND_LOAD_H
168++ A10B CD ED A1         CALL SETBACK_HL
169++ A10E C9               RET
170++ A10F
171++ A10F              ML_CIRCLE:
172++ A10F 3E 3F            LD A, %00111111
173++ A111 25               DEC H
174++ A112 CD E3 A1         CALL INC_AND_LOAD_H
175++ A115 3E 7F            LD A, %01111111
176++ A117 CD E3 A1         CALL INC_AND_LOAD_H
177++ A11A CD E3 A1         CALL INC_AND_LOAD_H
178++ A11D CD E3 A1         CALL INC_AND_LOAD_H
179++ A120 CD E3 A1         CALL INC_AND_LOAD_H
180++ A123 CD E3 A1         CALL INC_AND_LOAD_H
181++ A126 CD E3 A1         CALL INC_AND_LOAD_H
182++ A129 3E 3F            LD A, %00111111
183++ A12B CD E3 A1         CALL INC_AND_LOAD_H
184++ A12E CD ED A1         CALL SETBACK_HL
185++ A131 C9               RET
186++ A132
187++ A132              MM_CIRCLE:
188++ A132 3E FF            LD A, %11111111
189++ A134 25               DEC H
190++ A135 CD E3 A1         CALL INC_AND_LOAD_H
191++ A138 CD E3 A1         CALL INC_AND_LOAD_H
192++ A13B CD E3 A1         CALL INC_AND_LOAD_H
193++ A13E CD E3 A1         CALL INC_AND_LOAD_H
194++ A141 CD E3 A1         CALL INC_AND_LOAD_H
195++ A144 CD E3 A1         CALL INC_AND_LOAD_H
196++ A147 CD E3 A1         CALL INC_AND_LOAD_H
197++ A14A CD E3 A1         CALL INC_AND_LOAD_H
198++ A14D CD ED A1         CALL SETBACK_HL
199++ A150 C9               RET
200++ A151
201++ A151              MR_CIRCLE:
202++ A151 3E FC            LD A, %11111100
203++ A153 25               DEC H
204++ A154 CD E3 A1         CALL INC_AND_LOAD_H
205++ A157 3E FE            LD A, %11111110
206++ A159 CD E3 A1         CALL INC_AND_LOAD_H
207++ A15C CD E3 A1         CALL INC_AND_LOAD_H
208++ A15F CD E3 A1         CALL INC_AND_LOAD_H
209++ A162 CD E3 A1         CALL INC_AND_LOAD_H
210++ A165 CD E3 A1         CALL INC_AND_LOAD_H
211++ A168 CD E3 A1         CALL INC_AND_LOAD_H
212++ A16B 3E FC            LD A, %11111100
213++ A16D CD E3 A1         CALL INC_AND_LOAD_H
214++ A170 CD ED A1         CALL SETBACK_HL
215++ A173 C9               RET
216++ A174
217++ A174              LL_CIRCLE:
218++ A174 3E 3F            LD A, %00111111
219++ A176 77               LD (HL), A
220++ A177 CD E3 A1         CALL INC_AND_LOAD_H
221++ A17A 3E 1F            LD A, %00011111
222++ A17C CD E3 A1         CALL INC_AND_LOAD_H
223++ A17F 3E 0F            LD A, %00001111
224++ A181 CD E3 A1         CALL INC_AND_LOAD_H
225++ A184 3E 07            LD A, %00000111
226++ A186 CD E3 A1         CALL INC_AND_LOAD_H
227++ A189 3E 03            LD A, %00000011
228++ A18B CD E3 A1         CALL INC_AND_LOAD_H
229++ A18E 3E 00            LD A, %00000000
230++ A190 CD E3 A1         CALL INC_AND_LOAD_H
231++ A193 CD E3 A1         CALL INC_AND_LOAD_H
232++ A196 CD ED A1         CALL SETBACK_HL
233++ A199 C9               RET
234++ A19A
235++ A19A              LM_CIRCLE:
236++ A19A 3E FF            LD A, %11111111
237++ A19C 25               DEC H
238++ A19D CD E3 A1         CALL INC_AND_LOAD_H
239++ A1A0 CD E3 A1         CALL INC_AND_LOAD_H
240++ A1A3 CD E3 A1         CALL INC_AND_LOAD_H
241++ A1A6 CD E3 A1         CALL INC_AND_LOAD_H
242++ A1A9 CD E3 A1         CALL INC_AND_LOAD_H
243++ A1AC CD E3 A1         CALL INC_AND_LOAD_H
244++ A1AF 3E 7E            LD A, %01111110
245++ A1B1 CD E3 A1         CALL INC_AND_LOAD_H
246++ A1B4 3E 00            LD A, %00000000
247++ A1B6 CD E3 A1         CALL INC_AND_LOAD_H
248++ A1B9 CD ED A1         CALL SETBACK_HL
249++ A1BC C9               RET
250++ A1BD
251++ A1BD              LR_CIRCLE:
252++ A1BD 3E FC            LD A, %11111100
253++ A1BF 77               LD (HL), A
254++ A1C0 CD E3 A1         CALL INC_AND_LOAD_H
255++ A1C3 3E F8            LD A, %11111000
256++ A1C5 CD E3 A1         CALL INC_AND_LOAD_H
257++ A1C8 3E F0            LD A, %11110000
258++ A1CA CD E3 A1         CALL INC_AND_LOAD_H
259++ A1CD 3E E0            LD A, %11100000
260++ A1CF CD E3 A1         CALL INC_AND_LOAD_H
261++ A1D2 3E C0            LD A, %11000000
262++ A1D4 CD E3 A1         CALL INC_AND_LOAD_H
263++ A1D7 3E 00            LD A, %00000000
264++ A1D9 CD E3 A1         CALL INC_AND_LOAD_H
265++ A1DC CD E3 A1         CALL INC_AND_LOAD_H
266++ A1DF CD ED A1         CALL SETBACK_HL
267++ A1E2 C9               RET
268++ A1E3
269++ A1E3              INC_AND_LOAD_H:
270++ A1E3 50 59            LD DE, BC
271++ A1E5 01 00 01         LD BC, $0100
272++ A1E8 09               ADD HL, BC
273++ A1E9 77               LD (HL), A
274++ A1EA 42 4B            LD BC, DE
275++ A1EC C9               RET
276++ A1ED
277++ A1ED              SETBACK_HL:
278++ A1ED 50 59            LD DE, BC
279++ A1EF 01 01 F9         LD BC, $F901
280++ A1F2 09               ADD HL, BC
281++ A1F3 42 4B            LD BC, DE
282++ A1F5 C9               RET
283++ A1F6
284++ A1F6              INC_HL_3X3:
285++ A1F6 77               LD (HL), A
286++ A1F7 50 59            LD DE, BC
287++ A1F9 23               INC HL
288++ A1FA 77               LD (HL), A
289++ A1FB 23               INC HL
290++ A1FC 77               LD (HL), A
291++ A1FD 01 1E 00         LD BC, 30
292++ A200 09               ADD HL, BC
293++ A201 C9               RET
294++ A202
295++ A202              SET_C_COLOR_E:
296++ A202 3E 0F            LD A, 1*8+7
297++ A204 CD F6 A1         CALL INC_HL_3X3
298++ A207 CD F6 A1         CALL INC_HL_3X3
299++ A20A CD F6 A1         CALL INC_HL_3X3
300++ A20D C9               RET
301++ A20E
302++ A20E              CONVERT_58_2_40 ; CONVIERTE UNA DIRECCION DE MEMORIA QUE COMIENZA CON $58XX A $40XX
303++ A20E 01 00 E8         LD BC, $E800
304++ A211 09               ADD HL, BC
305++ A212 C9               RET
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\pantalla_juego.asm
 16+  A213
 17+  A213              GB_BIENVENIDA:
 18+  A213 D5               PUSH DE
 18+  A214 E5             PUSH HL
 18+  A215 C5             PUSH BC
 18+  A216 F5             PUSH AF
 19+  A217
 20+  A217 11 00 40         LD DE, $4000
 21+  A21A 21 B6 84         LD HL, PANTALLA_BIENVENIDA
 22+  A21D 01 00 1B         LD BC, $5B00 - $4000
 23+  A220              BIENVENIDA_BUCLE:
 24+  A220 ED B0            LDIR
 25+  A222              PRINT_BIENVENIDA:
 26+  A222 06 01            LD B, 1
 27+  A224 0E 04            LD C, 4
 28+  A226 DD 21 FC 83      LD IX, STRING_FILA_VACIA_B
 29+  A22A CD 78 80         CALL PRINTAT
 30+  A22D 06 03            LD B, 3
 31+  A22F DD 21 FC 83      LD IX, STRING_FILA_VACIA_B
 32+  A233 CD 78 80         CALL PRINTAT
 33+  A236 06 02            LD B, 2
 34+  A238 3E 02            LD A, COLOR_TEXTO_ROJO
 35+  A23A DD 21 15 84      LD IX, STRING_BIENVENIDA
 36+  A23E CD 78 80         CALL PRINTAT
 37+  A241
 38+  A241 06 14            LD B, 20
 39+  A243 0E 09            LD C, 9
 40+  A245 DD 21 46 84      LD IX, STRING_FILA_VACIA_J
 41+  A249 CD 78 80         CALL PRINTAT
 42+  A24C 06 16            LD B, 22
 43+  A24E DD 21 46 84      LD IX, STRING_FILA_VACIA_J
 44+  A252 CD 78 80         CALL PRINTAT
 45+  A255 06 15            LD B, 21
 46+  A257 3E 06            LD A, COLOR_TEXTO_AMARILLO
 47+  A259 DD 21 2E 84      LD IX, STRING_JUGAR
 48+  A25D CD 78 80         CALL PRINTAT
 49+  A260 3E B0            LD A, BLINK + 8*COLOR_TEXTO_AMARILLO
 50+  A262
 51+  A262              GB_BLINKER_JUGAR:
 52+  A262 06 15            LD B, 21
 53+  A264 0E 1E            LD C, 30
 54+  A266 21 BE 5A         LD HL, $5800 + 21*NUM_COLS + 30
 55+  A269 77               LD (HL), A
 56+  A26A F1               POP AF
 56+  A26B C1             POP BC
 56+  A26C E1             POP HL
 56+  A26D D1             POP DE
 57+  A26E
 58+  A26E C9               RET
 59+  A26F
 60+  A26F              GB_PRINT_CHAR_SON:
 61+  A26F 06 15            LD B, 21
 62+  A271 0E 1E            LD C, 30
 63+  A273 DD 21 B4 84      LD IX, CHAR_CARACTER
 64+  A277 CD 78 80         CALL PRINTAT
 65+  A27A
 66+  A27A C9               RET
 67+  A27B
 68+  A27B              GB_ADIOS:
 69+  A27B CD CC A2         CALL PTLLA_NEGRA
 70+  A27E              PRINT_ADIOS:
 71+  A27E 06 0A            LD B, 10
 72+  A280 0E 0A            LD C, 10
 73+  A282 3E 10            LD A, 8*COLOR_TEXTO_ROJO
 74+  A284 DD 21 5E 84      LD IX, STRING_FILA_VACIA_A
 75+  A288 CD 78 80         CALL PRINTAT
 76+  A28B 06 0C            LD B, 12
 77+  A28D 3E 10            LD A, 8*COLOR_TEXTO_ROJO
 78+  A28F DD 21 5E 84      LD IX, STRING_FILA_VACIA_A
 79+  A293 CD 78 80         CALL PRINTAT
 80+  A296 06 0B            LD B, 11
 81+  A298 3E 10            LD A, 8*COLOR_TEXTO_ROJO
 82+  A29A DD 21 6B 84      LD IX, STRING_ADIOS
 83+  A29E CD 78 80         CALL PRINTAT
 84+  A2A1
 85+  A2A1 C9               RET
 86+  A2A2
 87+  A2A2              GB_FIN_NEXT:
 88+  A2A2 CD CC A2         CALL PTLLA_NEGRA
 89+  A2A5              PRINT_FIN:
 90+  A2A5 06 0F            LD B, 15
 91+  A2A7 0E 03            LD C, 3
 92+  A2A9 3E 10            LD A, 8*COLOR_TEXTO_ROJO
 93+  A2AB DD 21 78 84      LD IX, STRING_FIN
 94+  A2AF CD 78 80         CALL PRINTAT
 95+  A2B2 06 15            LD B, 21
 96+  A2B4 0E 00            LD C, 0
 97+  A2B6 3E 10            LD A, 8*COLOR_TEXTO_ROJO
 98+  A2B8 DD 21 93 84      LD IX, STRING_OTRA
 99+  A2BC CD 78 80         CALL PRINTAT
100+  A2BF 3E 90                LD A, BLINK + 8*COLOR_TEXTO_ROJO
101+  A2C1 CD 62 A2         CALL GB_BLINKER_JUGAR
102+  A2C4 C9               RET
103+  A2C5
104+  A2C5              GB_PTLLA_INICIO_DE_JUEGO:
105+  A2C5 CD CC A2         CALL PTLLA_NEGRA
106+  A2C8 CD B6 9F         CALL SCR_PTLLA_JUEGO
107+  A2CB C9               RET
108+  A2CC
109+  A2CC              PTLLA_NEGRA:
110+  A2CC C5               PUSH BC
110+  A2CD D5             PUSH DE
110+  A2CE E5             PUSH HL
110+  A2CF F5             PUSH AF
111+  A2D0
112+  A2D0 21 00 58         LD   HL,$5800
113+  A2D3 11 01 58         LD   DE,$5801
114+  A2D6 36 00            LD   (HL),0
115+  A2D8 01 FF 02         LD   BC,768-1
116+  A2DB ED B0            LDIR
117+  A2DD
118+  A2DD F1               POP AF
118+  A2DE E1             POP HL
118+  A2DF D1             POP DE
118+  A2E0 C1             POP BC
119+  A2E1 C9               RET
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_basic.asm
 24   A2E2                  INCLUDE "graphics_core.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_core.asm
  1+  A2E2              GC_COLOR_JUGADOR_ACTUAL:
  2+  A2E2 7A               LD A, D
  3+  A2E3 C6 80            ADD BLINK
  4+  A2E5 21 45 58         LD HL, $5845
  5+  A2E8 E5               PUSH HL
  6+  A2E9 CD F6 A1         CALL INC_HL_3X3
  7+  A2EC CD F6 A1         CALL INC_HL_3X3
  8+  A2EF CD F6 A1         CALL INC_HL_3X3
  9+  A2F2 E1               POP HL
 10+  A2F3 C9               RET
 11+  A2F4              ; SET_C_COLOR_R:
 12+  A2F4              ;     LD A, 1*8+2
 13+  A2F4              ;     CALL INC_HL_3X3
 14+  A2F4              ;     CALL INC_HL_3X3
 15+  A2F4              ;     CALL INC_HL_3X3
 16+  A2F4              ;     RET
 17+  A2F4
 18+  A2F4              GC_LEFT:
 19+  A2F4 E5               PUSH HL
 19+  A2F5 C5             PUSH BC
 19+  A2F6 F5             PUSH AF
 19+  A2F7 D5             PUSH DE
 20+  A2F8 3E 00            LD A, NEGRO
 21+  A2FA E5               PUSH HL
 22+  A2FB CD F6 A1         CALL INC_HL_3X3
 23+  A2FE CD F6 A1         CALL INC_HL_3X3
 24+  A301 CD F6 A1         CALL INC_HL_3X3
 25+  A304 E1               POP HL
 26+  A305 01 FD FF         LD BC, $FFFD
 27+  A308 09               ADD HL, BC
 28+  A309 7A               LD A, D
 29+  A30A C6 80            ADD BLINK
 30+  A30C E5               PUSH HL
 31+  A30D CD F6 A1         CALL INC_HL_3X3
 32+  A310 CD F6 A1         CALL INC_HL_3X3
 33+  A313 CD F6 A1         CALL INC_HL_3X3
 34+  A316 E1               POP HL
 35+  A317 D1               POP DE
 35+  A318 F1             POP AF
 35+  A319 C1             POP BC
 35+  A31A E1             POP HL
 36+  A31B
 37+  A31B C9               RET
 38+  A31C
 39+  A31C              GC_RIGHT:
 40+  A31C E5               PUSH HL
 40+  A31D C5             PUSH BC
 40+  A31E F5             PUSH AF
 41+  A31F 3E 00            LD A, NEGRO
 42+  A321 E5               PUSH HL
 43+  A322 CD F6 A1         CALL INC_HL_3X3
 44+  A325 CD F6 A1         CALL INC_HL_3X3
 45+  A328 CD F6 A1         CALL INC_HL_3X3
 46+  A32B E1               POP HL
 47+  A32C 01 03 00         LD BC, $3
 48+  A32F 09               ADD HL, BC
 49+  A330 7A               LD A, D
 50+  A331 C6 80            ADD BLINK
 51+  A333 E5               PUSH HL
 52+  A334 CD F6 A1         CALL INC_HL_3X3
 53+  A337 CD F6 A1         CALL INC_HL_3X3
 54+  A33A CD F6 A1         CALL INC_HL_3X3
 55+  A33D E1               POP HL
 56+  A33E F1               POP AF
 56+  A33F C1             POP BC
 56+  A340 E1             POP HL
 57+  A341
 58+  A341 C9               RET
 59+  A342              GC_ENTER:
 60+  A342              ; SET_C_COLOR_Y: ; LA RUTINA CAMBIA EL COLOR DE UN DETERMINADO BLOQUE 3X3 A AMARILLO
 61+  A342              ;     LD A, 1*8+6
 62+  A342              ;     CALL INC_HL_3X3
 63+  A342              ;     CALL INC_HL_3X3
 64+  A342              ;     CALL INC_HL_3X3
 65+  A342              ;     RET
 66+  A342
 67+  A342              ; ; SET_PRED ; Rutina para indicar que el jugador actual es el rojo
 68+  A342              ; ;     LD HL, $5845
 69+  A342              ; ;     LD A, 2
 70+  A342              ; ;     CALL INC_HL_3X3
 71+  A342              ; ;     CALL INC_HL_3X3
 72+  A342              ; ;     CALL INC_HL_3X3
 73+  A342              ; ;     LD HL, $5845
 74+  A342              ; ;     CALL CONVERT_58_2_40
 75+  A342              ; ;     CALL DRAW_CIRCLE
 76+  A342              ; ;     RET
 77+  A342
 78+  A342              ; ; SET_PYEL ; Rutina para indicar que el jugador actual es el amarillo
 79+  A342              ; ;     LD HL, $5857
 80+  A342              ; ;     LD A, 6
 81+  A342              ; ;     CALL INC_HL_3X3
 82+  A342              ; ;     CALL INC_HL_3X3
 83+  A342              ; ;     CALL INC_HL_3X3
 84+  A342              ; ;     LD HL, $5857
 85+  A342              ; ;     CALL CONVERT_58_2_40
 86+  A342              ; ;     CALL DRAW_CIRCLE
 87+  A342              ; ;     RET
 88+  A342              GC_DRAW_CIRCLES_TOP:
 89+  A342 E5               PUSH HL
 89+  A343 F5             PUSH AF
 89+  A344 C5             PUSH BC
 90+  A345 21 45 58         LD HL, $5845
 91+  A348 E5               PUSH HL
 92+  A349 3E 00            LD A, 0
 93+  A34B 06 07            LD B, 7
 94+  A34D              DRAW_BLANK_CIRCLE:
 95+  A34D C5               PUSH BC
 95+  A34E E5             PUSH HL
 96+  A34F CD F6 A1         CALL INC_HL_3X3
 97+  A352 CD F6 A1         CALL INC_HL_3X3
 98+  A355 CD F6 A1         CALL INC_HL_3X3
 99+  A358 E1               POP HL
 99+  A359 C1             POP BC
100+  A35A 10 F1            DJNZ DRAW_BLANK_CIRCLE
101+  A35C E1               POP HL
102+  A35D
103+  A35D CD 0E A2         CALL CONVERT_58_2_40
104+  A360 CD FC 9F         CALL DRAW_CIRCLE_ROW
105+  A363
106+  A363 C1               POP BC
106+  A364 F1             POP AF
106+  A365 E1             POP HL
107+  A366
108+  A366 C9               RET
109+  A367
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_core.asm
 25   A367                  INCLUDE "logic_flow.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_flow.asm
  1+  A367              LF_ESPERAR:
  2+  A367 C5               PUSH BC
  3+  A368 F5               PUSH AF
  4+  A369 01 FF 00         LD BC, CONTADOR
  5+  A36C              LF_ESPERAR1:
  6+  A36C 0B               DEC BC ; 6C
  7+  A36D 78               LD A, B ; 4C
  8+  A36E B1               OR C ; 4C
  9+  A36F 00               NOP ; 4C
 10+  A370 20 FA            JR NZ, LF_ESPERAR1 ; 12C
 11+  A372                  ; DURACION TOTAL = APPROX 0,49 SEG
 12+  A372 F1               POP AF
 13+  A373 C1               POP BC
 14+  A374 C9               RET
 15+  A375              LF_INICIALIZACION:
 16+  A375 16 06            LD D, PLAYER2
 17+  A377 CD 42 A3         CALL GC_DRAW_CIRCLES_TOP
 18+  A37A C9               RET
 19+  A37B              LF_SWITCH_JUGADOR:
 20+  A37B 7A               LD A, D
 21+  A37C FE 06            CP PLAYER2
 22+  A37E 28 05            JR Z, SET_P1
 23+  A380 FE 02            CP PLAYER1
 24+  A382 28 04            JR Z, SET_P2
 25+  A384 C9               RET
 26+  A385              SET_P1:
 27+  A385 16 02            LD D, PLAYER1
 28+  A387 C9               RET
 29+  A388              SET_P2:
 30+  A388 16 06            LD D, PLAYER2
 31+  A38A C9               RET
 32+  A38B
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_flow.asm
 26   A38B                  INCLUDE "logic_checks.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm
  1+  A38B              ULTIMA_FICHA_COLUMNA EQU $C001 ; Byte (0-6) de la √∫ltima columna jugada
  2+  A38B              ULTIMA_FICHA_FILA EQU $C002    ; Byte (0-5) de la √∫ltima fila jugada
  3+  A38B              TABLERO_ANCHO EQU 7
  4+  A38B              TABLERO_ALTO EQU 6
  5+  A38B              ESTADO_TABLERO EQU $D000
  6+  A38B              ; JUGADOR_ACTUAL EQU
  7+  A38B
  8+  A38B              LC_COMPROBAR_FIN:
  9+  A38B F5               PUSH AF
  9+  A38C C5             PUSH BC
  9+  A38D D5             PUSH DE
  9+  A38E DD E5          PUSH IX
 10+  A390                  ; VERIFICACIONES
 11+  A390 CD CD A3         CALL LC_CHECK_VERTICAL
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(12): error: [JR] Target out of range (+140)
 12+  A393 38 00            JR C, FIN_DE_JUEGO_DETECTADO
 13+  A395
 14+  A395 CD E7 A3         CALL LC_CHECK_HORIZONTAL
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(15): error: [JR] Target out of range (+135)
 15+  A398 38 00            JR C, FIN_DE_JUEGO_DETECTADO
 16+  A39A
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(17): error: Label not found: LC_CHECK_DIAGONAL1
 17+  A39A CD 00 00         CALL LC_CHECK_DIAGONAL1
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(18): error: [JR] Target out of range (+130)
 18+  A39D 38 00            JR C, FIN_DE_JUEGO_DETECTADO
 19+  A39F
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(20): error: Label not found: LC_CHECK_DIAGONAL2
 20+  A39F CD 00 00         CALL LC_CHECK_DIAGONAL2
 21+  A3A2 38 7D            JR C, FIN_DE_JUEGO_DETECTADO
 22+  A3A4
 23+  A3A4                  ; COMPROBAR SI HA GANADO UN JUGADOR
 24+  A3A4
 25+  A3A4                  ; COMPROBAR SI HAY EMPATE
 26+  A3A4              LC_COMPROBAR_4ENLINEA:
 27+  A3A4 F5               PUSH AF
 27+  A3A5 C5             PUSH BC
 27+  A3A6 D5             PUSH DE
 27+  A3A7 DD E5          PUSH IX
 28+  A3A9 0E 04            LD C,4  ; CONTADOR DE FICHAS A COMPROBAR
 29+  A3AB 1E 00            LD E,0  ; CONTADOR DE FICHAS SEGUIDAS
 30+  A3AD              COMPROBAR_BUCLE:
 31+  A3AD 56               LD D, (HL)  ; CARGAR COLOR DE LA CASILLA
 32+  A3AE BA               CP D    ; COMPARAR CON EL COLOR DEL JUGADOR ACTUAL
 33+  A3AF 20 1A            JR NZ, NO_COINCIDE
 34+  A3B1
 35+  A3B1 1C               INC E   ; SI COINCIDE, INCREMENTA EL CONTADOR
 36+  A3B2 16 04            LD D,4  ; NUMERO DE FICHAS NECESARIAS PARA GANAR
 37+  A3B4 BB               CP E    ; PARA VER SI LLEVAMOS 4 SEGUIDAS
 38+  A3B5 28 13            JR Z, HAY_VICTORIA
 39+  A3B7 18 00            JR COINCIDE_SIGUIENTE
 40+  A3B9
 41+  A3B9              COINCIDE_SIGUIENTE:
 42+  A3B9 C5               PUSH BC
 43+  A3BA 06 00            LD B,0  ; BC = SALTO
 44+  A3BC 48               LD C,B  ; C = B (SALTO)
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(45): error: [ADD] Comma expected
 45+  A3BD                  ADD HL  ; HL = HL + SALTO
 46+  A3BD C1               POP BC
 47+  A3BE
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(48): error: Syntax error: , COMPROBAR_BUCLE
 48+  A3BE 10 00 10 EB      DJNZ, COMPROBAR_BUCLE   ; SE REPITE 4 VECES (O LAS QUE SEAN NECESARIAS)
 49+  A3C2
 50+  A3C2 A7               AND A   ; LIMPIAR CARRY SI EL BUCLE TERMINA SIN VICTORIA
 51+  A3C3 18 00            JR FINALIZAR_CHECK
 52+  A3C5
 53+  A3C5              FINALIZAR_CHECK:
 54+  A3C5 DD E1            POP IX
 54+  A3C7 D1             POP DE
 54+  A3C8 E1             POP HL
 55+  A3C9 C9               RET
 56+  A3CA              HAY_VICTORIA:
 57+  A3CA 37               SCF ; ACTIVA EL CARRY
 58+  A3CB              NO_COINCIDE:
 59+  A3CB 1E 00            LD E,0  ; REINICIA EL CONTADOR DE FICHAS SEGUIDAS
 60+  A3CD
 61+  A3CD
 62+  A3CD              ; SE COMPRUEBAN LAS POSICIONES DE LAS FICHAS VERTICAL, HORIZONTAL, DIAGONAL IZQ Y DIAGONAL DER
 63+  A3CD
 64+  A3CD              LC_CHECK_VERTICAL:
 65+  A3CD              ; SE COMPRUEBA HACIA ABAJO SOLO
 66+  A3CD 3A 02 C0         LD A, (ULTIMA_FICHA_FILA)
 67+  A3D0 06 07            LD B, TABLERO_ANCHO
 68+  A3D2 CD 11 A4         CALL MULTIPLY_A_B ; HL = FILA POR ANCHO
 69+  A3D5 3A 01 C0         LD A, (ULTIMA_FICHA_COLUMNA)
 70+  A3D8 85               ADD L   ; HL = FILA*ANCHO + COLUMNA
 71+  A3D9 21 00 D0         LD HL, ESTADO_TABLERO
 72+  A3DC 19               ADD HL, DE  ; HL = DIRECCION DE LA ULTIMA FICHA
 73+  A3DD
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(74): error: Illegal instruction:     LD A, ; AQUI IRIA EL JUGADOR ACTUAL
 74+  A3DD                  LD A, ; AQUI IRIA EL JUGADOR ACTUAL
 75+  A3DD 06 07            LD B, TABLERO_ANCHO
 76+  A3DF
 77+  A3DF CD A4 A3         CALL LC_COMPROBAR_4ENLINEA
 78+  A3E2
 79+  A3E2 E1               POP HL
 79+  A3E3 D1             POP DE
 79+  A3E4 C1             POP BC
 79+  A3E5 F1             POP AF
 80+  A3E6 C9               RET
 81+  A3E7
 82+  A3E7              ; SE COMPRUEBA 4 FICHAS SEGUIDAS
 83+  A3E7              LC_CHECK_HORIZONTAL:
 84+  A3E7 F5               PUSH AF
 84+  A3E8 C5             PUSH BC
 84+  A3E9 D5             PUSH DE
 84+  A3EA E5             PUSH HL
 85+  A3EB                  ; SE CALCULA POSICION INICIAL DE LA FILA
 86+  A3EB 3A 02 C0         LD A, (ULTIMA_FICHA_FILA)
 87+  A3EE 06 07            LD B, TABLERO_ANCHO
 88+  A3F0 CD 11 A4         CALL MULTIPLY_A_B
 89+  A3F3 21 00 D0         LD HL, ESTADO_TABLERO
 90+  A3F6 19               ADD HL, DE
 91+  A3F7 0E 04            LD C,4  ; BUCLE DE 4 REPETICIONES
 92+  A3F9
 93+  A3F9              HORIZONTAL_BUCLE:
 94+  A3F9 E5               PUSH HL
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(95): error: Illegal instruction:     LD A, ; AQUI LA DIRECCION DE MEMORIA DEL JUGADOR ACTUAL (EL COLOR A BUSCAR)
 95+  A3FA                  LD A, ; AQUI LA DIRECCION DE MEMORIA DEL JUGADOR ACTUAL (EL COLOR A BUSCAR)
 96+  A3FA 06 01            LD B,1  ; SALTO HORIZONTAL = 1 BYTE
 97+  A3FC CD A4 A3         CALL LC_COMPROBAR_4ENLINEA
 98+  A3FF
 99+  A3FF E1               POP HL
100+  A400 38 09            JR C, HORIZONTAL_VICTORIA   ; SI ES VICTORIA, SALIR
101+  A402
102+  A402 23               INC HL  ; COLUMNA + 1
103+  A403 10 F4            DJNZ HORIZONTAL_BUCLE
104+  A405
105+  A405              HORIZONTAL_SIN_VICTORIA:
106+  A405 A7               AND A   ; C=0
107+  A406 E1               POP HL
107+  A407 D1             POP DE
107+  A408 C1             POP BC
107+  A409 F1             POP AF
108+  A40A C9               RET
109+  A40B              HORIZONTAL_VICTORIA:
110+  A40B 37               SCF
111+  A40C E1               POP HL
111+  A40D D1             POP DE
111+  A40E C1             POP BC
111+  A40F F1             POP AF
112+  A410 C9               RET
113+  A411              MULTIPLY_A_B:
114+  A411 F5               PUSH AF
114+  A412 C5             PUSH BC
115+  A413 21 00 00         LD HL, 0
116+  A416 4F               LD C,A
117+  A417 3E 00            LD A,0  ; CONTADOR
118+  A419              MULT_BUCLE:
119+  A419 09               ADD HL,BC
120+  A41A 3C               INC A
121+  A41B B9               CP C
122+  A41C 20 FB            JR NZ, MULT_BUCLE
123+  A41E C1               POP BC
123+  A41F F1             POP AF
124+  A420 C9               RET
125+  A421              FIN_DE_JUEGO_DETECTADO:
126+  A421 3E 00            LD A,0
127+  A423 F1               POP AF
127+  A424 C1             POP BC
127+  A425 D1             POP DE
127+  A426 DD E1          POP IX
128+  A428 C9               RET
129+  A429
130+  A429              LC_VALIDPLAY:
131+  A429                  ; PUSH DE: PUSH HL: PUSH AF: PUSH BC
132+  A429 7A               LD A, D
133+  A42A FE 51            CP 'Q'
134+  A42C 28 08            JR Z, VALIDLEFT
135+  A42E FE 57            CP 'W'
136+  A430 28 12            JR Z, VALIDRIGHT
137+  A432                  ; AQUI AGREGAREMOS DESPUES LA COMPROBACION PARA JUGADA VALIDA DE ENTER
138+  A432 FE 46            CP 'F'
139+  A434 28 1F            JR Z, VALID
140+  A436              VALIDLEFT:
141+  A436 21 45 58         LD HL, $5845
142+  A439 7E               LD A, (HL)
143+  A43A FE 82            CP BLINK + PLAYER1
144+  A43C 28 14            JR Z, NONVALID
145+  A43E FE 86            CP BLINK + PLAYER2
146+  A440 28 10            JR Z, NONVALID
147+  A442 18 11            JR VALID
148+  A444              VALIDRIGHT:
149+  A444 21 57 58         LD HL, $5857
150+  A447 7E               LD A, (HL)
151+  A448 FE 82            CP BLINK + PLAYER1
152+  A44A 28 06            JR Z, NONVALID
153+  A44C FE 86            CP BLINK + PLAYER2
154+  A44E 28 02            JR Z, NONVALID
155+  A450 18 03            JR VALID
156+  A452              NONVALID:
157+  A452 3E 01            LD A, 1
158+  A454 C9               RET
159+  A455              VALID:
160+  A455 3E 02            LD A, 2
161+  A457 C9               RET
162+  A458
163+  A458
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm
 27   A458
 28   A458              ; INICIO DEL FLUJO DEL PROGRAMA FUNCIONAL
 29   A458              INICIO:
 30   A458 CD 13 A2         CALL GB_BIENVENIDA ; DIBUJAR PANTALLA DE BIENVENIDA
 31   A45B CD 0A 80         CALL K_SON ; RECIBIR LECTURA DE TECLADO
 32   A45E 7A               LD A, D
 33   A45F 32 B4 84         LD (CHAR_CARACTER), A ; GUARDA LA TECLA PULSADA
 34   A462 3E 06            LD A, COLOR_TEXTO_AMARILLO
 35   A464 CD 6F A2         CALL GB_PRINT_CHAR_SON ; IMPRIME LA TECLA PULSADA
 36   A467 3A B4 84         LD A, (CHAR_CARACTER)
 37   A46A FE 53            CP 'S'
 38   A46C CC 90 A4         CALL Z, LOGICA_JUEGO ; SI SE PULSO 'S', COMIENZA LA LOGICA DEL JUEGO
 39   A46F FE 4E            CP 'N'
 40   A471 CC 74 A4         CALL Z, ADIOS ; SI SE PULSO 'N', NOS DESPEDIMOS
 41   A474
 42   A474              ADIOS:
 43   A474 CD 7B A2         CALL GB_ADIOS ; DIBUJA PANTALLA DE ADIOS
 44   A477              FINAL: ; COMIENZA EJECUCION DEL FINAL DEL JUEGO (DE MOMENTO NO HACE NADA NOTABLE EN REALIDAD)
 45   A477 06 0A            LD B, 10
 46   A479 CD C4 A4         CALL ESPERAR
 47   A47C 10 F9            DJNZ FINAL
 48   A47E 76               HALT
 49   A47F
 50   A47F              FIN_NEXT: ; TERMINO LA PARTIDA, OFRECEMOS OTRA O FINALIZAR
 51   A47F CD A2 A2         CALL GB_FIN_NEXT ; DIBUJAR LA PANTALLA DE FIN + SIGUIENTE
 52   A482 CD 0A 80         CALL K_SON ; RECIBIR ENTRADA DEL TECLADO S O N
 53   A485 7A               LD A, D
 54   A486 FE 53            CP 'S'
 55   A488 CC 90 A4         CALL Z, LOGICA_JUEGO ; SI SE PULSO 'S', INICIAMOS NUEVO JUEGO
 56   A48B FE 4E            CP 'N'
 57   A48D CC 74 A4         CALL Z, ADIOS ; SI SE PULSO 'N', NOS DESPEDIMOS
 58   A490
 59   A490              LOGICA_JUEGO:
 60   A490 CD C5 A2         CALL GB_PTLLA_INICIO_DE_JUEGO ; DIBUJA LA PANTALLA DEL INICIO DEL JUEGO
 61   A493                  ; HALT
 62   A493 CD 75 A3         CALL LF_INICIALIZACION ; INICIALIZA CONDICIONES DEL JUEGO
 63   A496              BUCLE_JUEGO:
 64   A496 CD 7B A3         CALL LF_SWITCH_JUGADOR ; CAMBIA DE JUGADOR
 65   A499              GESTIONAR_JUGADA:
 66   A499 CD E2 A2         CALL GC_COLOR_JUGADOR_ACTUAL ; MUESTRA POR PANTALLA EL JUGADOR ACTUAL
 67   A49C              JUGADA:
 68   A49C CD 2D 80         CALL K_LR_ENTER_F ; BUSCA ENTRADA (LEFT, RIGHT, ENTER, F PARA TERMINAR)
 69   A49F 7A               LD A, D
 70   A4A0 F5               PUSH AF
 71   A4A1 CD 29 A4         CALL LC_VALIDPLAY ; COMPRUEBA QUE LA TECLA PULSADA RESULTARIA EN UN MOVIMIENTO VALIDO
 72   A4A4 FE 01            CP 1
 73   A4A6 28 F4            JR Z, JUGADA ; SI NO FUE VALIDO, VOLVEMOS A ESPERAR A RECIBIR UNA JUGADA
 74   A4A8 F1               POP AF
 75   A4A9 FE 57            CP 'W'
 76   A4AB CC EA A4         CALL Z, JUGADA_DESPLAZAMIENTO
 77   A4AE FE 51            CP 'Q'
 78   A4B0 CC EA A4         CALL Z, JUGADA_DESPLAZAMIENTO
 79   A4B3 FE 0D            CP 13
 80   A4B5 CC 42 A3         CALL Z, GC_ENTER
 81   A4B8 FE 46            CP 'F'
 82   A4BA CC 7F A4         CALL Z, FIN_NEXT
 83   A4BD
 84   A4BD              COMPROBAR_FIN_JUEGO:
 85   A4BD CD 8B A3         CALL LC_COMPROBAR_FIN
 86   A4C0                  ; SI SE DETECTO EL FIN DEL JUEGO
 87   A4C0                  ; JR (CONDICION DE FIN), FIN_NEXT
 88   A4C0                  ; SI SE DETECTA QUE EL JUEGO SIGUE
 89   A4C0 28 BD            JR Z, FIN_NEXT
 90   A4C2 18 D2            JR BUCLE_JUEGO
 91   A4C4
 92   A4C4              ESPERAR:
 93   A4C4 C5               PUSH BC
 94   A4C5 F5               PUSH AF
 95   A4C6 01 FF 00         LD BC, CONTADOR
 96   A4C9              ESPERAR1:
 97   A4C9 0B               DEC BC ; 6C
 98   A4CA 78               LD A, B ; 4C
 99   A4CB B1               OR C ; 4C
100   A4CC 00               NOP ; 4C
101   A4CD 20 FA            JR NZ, ESPERAR1 ; 12C
102   A4CF                  ; DURACION TOTAL = APPROX 0,49 SEG
103   A4CF F1               POP AF
104   A4D0 C1               POP BC
105   A4D1 C9               RET
106   A4D2
107   A4D2              COORD_ATRIB:
108   A4D2                  ; PREREQUISITO: HABER SELECCIONADO UNA FILA Y UNA COLUMNA (H Y L) SOBRE LA QUE SE QUIERE OBTENER UNA DIRECCI√ìN VIDEORAM
109   A4D2                  ; H = FILA
110   A4D2                  ; L = COLUMNA
111   A4D2                  ; HL = DIRECCI√ìN DE LA VIDEORAM
112   A4D2
113   A4D2 F5               PUSH AF
114   A4D3 7C               LD A, H ; 0 0 0 H4 H3 H2 H1 H0
115   A4D4 CB 27            SLA A
115   A4D6 CB 27          SLA A
115   A4D8 CB 27          SLA A
115   A4DA CB 27          SLA A
115   A4DC CB 27          SLA A ; H2 H1 H0 0 0 0 0 0
116   A4DE B5               OR L ; H2 H1 H0 L4 L3 L2 L1 L0
117   A4DF 7C               LD A, H ; 0 0 0 H4 H3 H2 H1 H0
118   A4E0 CB 2F            SRA A
118   A4E2 CB 2F          SRA A
118   A4E4 CB 2F          SRA A; 0 0 0 0 0 0 H4 H3
119   A4E6 F6 58            OR $58 ; 0 1 0 1 1 0 H4 H3
120   A4E8                  ; HL = 0 1 0 1 1 0 H4 H3 H2 H1 H0 L4 L3 L2 L1 L0
121   A4E8 F1               POP AF
122   A4E9 C9               RET
123   A4EA
124   A4EA              JUGADA_DESPLAZAMIENTO:
125   A4EA FE 57            CP 'W'
126   A4EC CC F4 A2         CALL Z, GC_LEFT ; DESPLAZAMOS IZQUIERDA LA FICHA
127   A4EF FE 51            CP 'Q'
128   A4F1 CC 1C A3         CALL Z, GC_RIGHT ; DESPLAZAMOS DERECHA LA FICHA
129   A4F4 18 A6            JR JUGADA
130   A4F6
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\main.asm
