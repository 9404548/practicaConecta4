C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(131): error: Duplicate label: LC_COMPROBAR_FIN
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\main.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000                  ORG $8000
  3   8000 31 00 00         LD SP, 0
  4   8003 3E 00            LD A, 0 ; VALOR INICIAL DE A
  5   8005 D3 FE            OUT ($FE), A ; COLOREA EL MARCO DE LA PANTALLA NEGRO
  6   8007 C3 AC A2         JP INICIO
  7   800A
  8   800A              ; CONSTANTES
  9   800A              CONTADOR EQU 255
 10   800A              NUM_FILAS EQU 24
 11   800A              NUM_COLS EQU 32
 12   800A
 13   800A              COLOR_TEXTO_AZUL EQU 1
 14   800A              COLOR_TEXTO_ROJO EQU 2
 15   800A              COLOR_TEXTO_AMARILLO EQU 6
 16   800A              BLINK EQU 128
 17   800A
 18   800A              ; INCLUDES
 19   800A                  INCLUDE "colors.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\colors.asm
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\colors.asm
 20   800A                  INCLUDE "graphics_basic.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_basic.asm
  1+  800A              PANTALLA_BIENVENIDA: INCBIN "connect4screen.SCR"
  2+  9B0A                  INCLUDE "pantalla_juego.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\pantalla_juego.asm
  1++ 9B0A              SCR_PTLLA_JUEGO:
  2++ 9B0A C5               PUSH BC
  2++ 9B0B E5             PUSH HL
  2++ 9B0C D5             PUSH DE
  2++ 9B0D F5             PUSH AF
  3++ 9B0E 3E 00            LD A, 0
  4++ 9B10 21 A5 58         LD HL, $58A5
  5++ 9B13 CD 21 9B         CALL SET_GRID_EMPTY
  6++ 9B16 21 A5 40         LD HL, $40A5
  7++ 9B19 CD 37 9B         CALL DRAW_EMPTY_CIRCLES
  8++ 9B1C F1               POP AF
  8++ 9B1D D1             POP DE
  8++ 9B1E E1             POP HL
  8++ 9B1F C1             POP BC
  9++ 9B20 C9               RET
 10++ 9B21
 11++ 9B21              SET_GRID_EMPTY:
 12++ 9B21 CD 7A 9B         CALL SET_COLUMN_COLOR
 13++ 9B24 CD 7A 9B         CALL SET_COLUMN_COLOR
 14++ 9B27 CD 7A 9B         CALL SET_COLUMN_COLOR
 15++ 9B2A CD 7A 9B         CALL SET_COLUMN_COLOR
 16++ 9B2D CD 7A 9B         CALL SET_COLUMN_COLOR
 17++ 9B30 CD 7A 9B         CALL SET_COLUMN_COLOR
 18++ 9B33 CD 7A 9B         CALL SET_COLUMN_COLOR
 19++ 9B36 C9               RET
 20++ 9B37
 21++ 9B37              DRAW_EMPTY_CIRCLES:
 22++ 9B37 CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 23++ 9B3A CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 24++ 9B3D CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 25++ 9B40 CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 26++ 9B43 CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 27++ 9B46 CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 28++ 9B49 CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 29++ 9B4C CD 50 9B         CALL DRAW_CIRCLE_COLUMN
 30++ 9B4F C9               RET
 31++ 9B50
 32++ 9B50              DRAW_CIRCLE_COLUMN:
 33++ 9B50 CD 91 9B         CALL DRAW_CIRCLE
 34++ 9B53 CD 91 9B         CALL DRAW_CIRCLE
 35++ 9B56 CD 91 9B         CALL DRAW_CIRCLE
 36++ 9B59 CD 91 9B         CALL DRAW_CIRCLE
 37++ 9B5C CD 91 9B         CALL DRAW_CIRCLE
 38++ 9B5F CD 91 9B         CALL DRAW_CIRCLE
 39++ 9B62 01 C3 EF         LD BC, $EFC3
 40++ 9B65 09               ADD HL, BC
 41++ 9B66 C9               RET
 42++ 9B67
 43++ 9B67              VERIFY_4000:
 44++ 9B67 3E 41            LD A, $41
 45++ 9B69 BC               CP H
 46++ 9B6A CC 74 9B         CALL Z, SET_4800
 47++ 9B6D 3E 49            LD A, $49
 48++ 9B6F BC               CP H
 49++ 9B70 CC 77 9B         CALL Z, SET_5000
 50++ 9B73 C9               RET
 51++ 9B74
 52++ 9B74              SET_4800:
 53++ 9B74 26 48            LD H, $48
 54++ 9B76 C9               RET
 55++ 9B77
 56++ 9B77              SET_5000:
 57++ 9B77 26 50            LD H, $50
 58++ 9B79 C9               RET
 59++ 9B7A
 60++ 9B7A              SET_COLUMN_COLOR:
 61++ 9B7A CD 1E 9D         CALL SET_C_COLOR_E
 62++ 9B7D CD 1E 9D         CALL SET_C_COLOR_E
 63++ 9B80 CD 1E 9D         CALL SET_C_COLOR_E
 64++ 9B83 CD 1E 9D         CALL SET_C_COLOR_E
 65++ 9B86 CD 1E 9D         CALL SET_C_COLOR_E
 66++ 9B89 CD 1E 9D         CALL SET_C_COLOR_E
 67++ 9B8C 01 C3 FD         LD BC, $FDC3
 68++ 9B8F 09               ADD HL, BC
 69++ 9B90 C9               RET
 70++ 9B91
 71++ 9B91              DRAW_CIRCLE:
 72++ 9B91
 73++ 9B91 01 1D 00         LD BC, $001D
 74++ 9B94
 75++ 9B94 CD BC 9B         CALL UL_CIRCLE
 76++ 9B97 CD E2 9B         CALL UM_CIRCLE
 77++ 9B9A CD 05 9C         CALL UR_CIRCLE
 78++ 9B9D
 79++ 9B9D 09               ADD HL, BC
 80++ 9B9E CD 67 9B         CALL VERIFY_4000
 81++ 9BA1
 82++ 9BA1 CD 2B 9C         CALL ML_CIRCLE
 83++ 9BA4 CD 4E 9C         CALL MM_CIRCLE
 84++ 9BA7 CD 6D 9C         CALL MR_CIRCLE
 85++ 9BAA
 86++ 9BAA 09               ADD HL, BC
 87++ 9BAB CD 67 9B         CALL VERIFY_4000
 88++ 9BAE
 89++ 9BAE CD 90 9C         CALL LL_CIRCLE
 90++ 9BB1 CD B6 9C         CALL LM_CIRCLE
 91++ 9BB4 CD D9 9C         CALL LR_CIRCLE
 92++ 9BB7
 93++ 9BB7 09               ADD HL, BC
 94++ 9BB8 CD 67 9B         CALL VERIFY_4000
 95++ 9BBB
 96++ 9BBB C9               RET
 97++ 9BBC
 98++ 9BBC              UL_CIRCLE:
 99++ 9BBC 3E 00            LD A, %00000000
100++ 9BBE 77               LD (HL), A
101++ 9BBF CD FF 9C         CALL INC_AND_LOAD_H
102++ 9BC2 3E 03            LD A, %00000011
103++ 9BC4 CD FF 9C         CALL INC_AND_LOAD_H
104++ 9BC7 3E 07            LD A, %00000111
105++ 9BC9 CD FF 9C         CALL INC_AND_LOAD_H
106++ 9BCC 3E 0F            LD A, %00001111
107++ 9BCE CD FF 9C         CALL INC_AND_LOAD_H
108++ 9BD1 3E 1F            LD A, %00011111
109++ 9BD3 CD FF 9C         CALL INC_AND_LOAD_H
110++ 9BD6 3E 3F            LD A, %00111111
111++ 9BD8 CD FF 9C         CALL INC_AND_LOAD_H
112++ 9BDB CD FF 9C         CALL INC_AND_LOAD_H
113++ 9BDE CD 09 9D         CALL SETBACK_HL
114++ 9BE1 C9               RET
115++ 9BE2
116++ 9BE2              UM_CIRCLE:
117++ 9BE2 3E 00            LD A, %00000000
118++ 9BE4 25               DEC H
119++ 9BE5 CD FF 9C         CALL INC_AND_LOAD_H
120++ 9BE8 3E 7E            LD A, %01111110
121++ 9BEA CD FF 9C         CALL INC_AND_LOAD_H
122++ 9BED 3E FF            LD A, %11111111
123++ 9BEF CD FF 9C         CALL INC_AND_LOAD_H
124++ 9BF2 CD FF 9C         CALL INC_AND_LOAD_H
125++ 9BF5 CD FF 9C         CALL INC_AND_LOAD_H
126++ 9BF8 CD FF 9C         CALL INC_AND_LOAD_H
127++ 9BFB CD FF 9C         CALL INC_AND_LOAD_H
128++ 9BFE CD FF 9C         CALL INC_AND_LOAD_H
129++ 9C01 CD 09 9D         CALL SETBACK_HL
130++ 9C04 C9               RET
131++ 9C05
132++ 9C05              UR_CIRCLE:
133++ 9C05 3E 00            LD A, %00000000
134++ 9C07 77               LD (HL), A
135++ 9C08 CD FF 9C         CALL INC_AND_LOAD_H
136++ 9C0B 3E C0            LD A, %11000000
137++ 9C0D CD FF 9C         CALL INC_AND_LOAD_H
138++ 9C10 3E E0            LD A, %11100000
139++ 9C12 CD FF 9C         CALL INC_AND_LOAD_H
140++ 9C15 3E F0            LD A, %11110000
141++ 9C17 CD FF 9C         CALL INC_AND_LOAD_H
142++ 9C1A 3E F8            LD A, %11111000
143++ 9C1C CD FF 9C         CALL INC_AND_LOAD_H
144++ 9C1F 3E FC            LD A, %11111100
145++ 9C21 CD FF 9C         CALL INC_AND_LOAD_H
146++ 9C24 CD FF 9C         CALL INC_AND_LOAD_H
147++ 9C27 CD 09 9D         CALL SETBACK_HL
148++ 9C2A C9               RET
149++ 9C2B
150++ 9C2B              ML_CIRCLE:
151++ 9C2B 3E 3F            LD A, %00111111
152++ 9C2D 25               DEC H
153++ 9C2E CD FF 9C         CALL INC_AND_LOAD_H
154++ 9C31 3E 7F            LD A, %01111111
155++ 9C33 CD FF 9C         CALL INC_AND_LOAD_H
156++ 9C36 CD FF 9C         CALL INC_AND_LOAD_H
157++ 9C39 CD FF 9C         CALL INC_AND_LOAD_H
158++ 9C3C CD FF 9C         CALL INC_AND_LOAD_H
159++ 9C3F CD FF 9C         CALL INC_AND_LOAD_H
160++ 9C42 CD FF 9C         CALL INC_AND_LOAD_H
161++ 9C45 3E 3F            LD A, %00111111
162++ 9C47 CD FF 9C         CALL INC_AND_LOAD_H
163++ 9C4A CD 09 9D         CALL SETBACK_HL
164++ 9C4D C9               RET
165++ 9C4E
166++ 9C4E              MM_CIRCLE:
167++ 9C4E 3E FF            LD A, %11111111
168++ 9C50 25               DEC H
169++ 9C51 CD FF 9C         CALL INC_AND_LOAD_H
170++ 9C54 CD FF 9C         CALL INC_AND_LOAD_H
171++ 9C57 CD FF 9C         CALL INC_AND_LOAD_H
172++ 9C5A CD FF 9C         CALL INC_AND_LOAD_H
173++ 9C5D CD FF 9C         CALL INC_AND_LOAD_H
174++ 9C60 CD FF 9C         CALL INC_AND_LOAD_H
175++ 9C63 CD FF 9C         CALL INC_AND_LOAD_H
176++ 9C66 CD FF 9C         CALL INC_AND_LOAD_H
177++ 9C69 CD 09 9D         CALL SETBACK_HL
178++ 9C6C C9               RET
179++ 9C6D
180++ 9C6D              MR_CIRCLE:
181++ 9C6D 3E FC            LD A, %11111100
182++ 9C6F 25               DEC H
183++ 9C70 CD FF 9C         CALL INC_AND_LOAD_H
184++ 9C73 3E FE            LD A, %11111110
185++ 9C75 CD FF 9C         CALL INC_AND_LOAD_H
186++ 9C78 CD FF 9C         CALL INC_AND_LOAD_H
187++ 9C7B CD FF 9C         CALL INC_AND_LOAD_H
188++ 9C7E CD FF 9C         CALL INC_AND_LOAD_H
189++ 9C81 CD FF 9C         CALL INC_AND_LOAD_H
190++ 9C84 CD FF 9C         CALL INC_AND_LOAD_H
191++ 9C87 3E FC            LD A, %11111100
192++ 9C89 CD FF 9C         CALL INC_AND_LOAD_H
193++ 9C8C CD 09 9D         CALL SETBACK_HL
194++ 9C8F C9               RET
195++ 9C90
196++ 9C90              LL_CIRCLE:
197++ 9C90 3E 3F            LD A, %00111111
198++ 9C92 77               LD (HL), A
199++ 9C93 CD FF 9C         CALL INC_AND_LOAD_H
200++ 9C96 3E 1F            LD A, %00011111
201++ 9C98 CD FF 9C         CALL INC_AND_LOAD_H
202++ 9C9B 3E 0F            LD A, %00001111
203++ 9C9D CD FF 9C         CALL INC_AND_LOAD_H
204++ 9CA0 3E 07            LD A, %00000111
205++ 9CA2 CD FF 9C         CALL INC_AND_LOAD_H
206++ 9CA5 3E 03            LD A, %00000011
207++ 9CA7 CD FF 9C         CALL INC_AND_LOAD_H
208++ 9CAA 3E 00            LD A, %00000000
209++ 9CAC CD FF 9C         CALL INC_AND_LOAD_H
210++ 9CAF CD FF 9C         CALL INC_AND_LOAD_H
211++ 9CB2 CD 09 9D         CALL SETBACK_HL
212++ 9CB5 C9               RET
213++ 9CB6
214++ 9CB6              LM_CIRCLE:
215++ 9CB6 3E FF            LD A, %11111111
216++ 9CB8 25               DEC H
217++ 9CB9 CD FF 9C         CALL INC_AND_LOAD_H
218++ 9CBC CD FF 9C         CALL INC_AND_LOAD_H
219++ 9CBF CD FF 9C         CALL INC_AND_LOAD_H
220++ 9CC2 CD FF 9C         CALL INC_AND_LOAD_H
221++ 9CC5 CD FF 9C         CALL INC_AND_LOAD_H
222++ 9CC8 CD FF 9C         CALL INC_AND_LOAD_H
223++ 9CCB 3E 7E            LD A, %01111110
224++ 9CCD CD FF 9C         CALL INC_AND_LOAD_H
225++ 9CD0 3E 00            LD A, %00000000
226++ 9CD2 CD FF 9C         CALL INC_AND_LOAD_H
227++ 9CD5 CD 09 9D         CALL SETBACK_HL
228++ 9CD8 C9               RET
229++ 9CD9
230++ 9CD9              LR_CIRCLE:
231++ 9CD9 3E FC            LD A, %11111100
232++ 9CDB 77               LD (HL), A
233++ 9CDC CD FF 9C         CALL INC_AND_LOAD_H
234++ 9CDF 3E F8            LD A, %11111000
235++ 9CE1 CD FF 9C         CALL INC_AND_LOAD_H
236++ 9CE4 3E F0            LD A, %11110000
237++ 9CE6 CD FF 9C         CALL INC_AND_LOAD_H
238++ 9CE9 3E E0            LD A, %11100000
239++ 9CEB CD FF 9C         CALL INC_AND_LOAD_H
240++ 9CEE 3E C0            LD A, %11000000
241++ 9CF0 CD FF 9C         CALL INC_AND_LOAD_H
242++ 9CF3 3E 00            LD A, %00000000
243++ 9CF5 CD FF 9C         CALL INC_AND_LOAD_H
244++ 9CF8 CD FF 9C         CALL INC_AND_LOAD_H
245++ 9CFB CD 09 9D         CALL SETBACK_HL
246++ 9CFE C9               RET
247++ 9CFF
248++ 9CFF              INC_AND_LOAD_H:
249++ 9CFF 50 59            LD DE, BC
250++ 9D01 01 00 01         LD BC, $0100
251++ 9D04 09               ADD HL, BC
252++ 9D05 77               LD (HL), A
253++ 9D06 42 4B            LD BC, DE
254++ 9D08 C9               RET
255++ 9D09
256++ 9D09              SETBACK_HL:
257++ 9D09 50 59            LD DE, BC
258++ 9D0B 01 01 F9         LD BC, $F901
259++ 9D0E 09               ADD HL, BC
260++ 9D0F 42 4B            LD BC, DE
261++ 9D11 C9               RET
262++ 9D12
263++ 9D12              INC_HL_3X3:
264++ 9D12 77               LD (HL), A
265++ 9D13 50 59            LD DE, BC
266++ 9D15 23               INC HL
267++ 9D16 77               LD (HL), A
268++ 9D17 23               INC HL
269++ 9D18 77               LD (HL), A
270++ 9D19 01 1E 00         LD BC, 30
271++ 9D1C 09               ADD HL, BC
272++ 9D1D C9               RET
273++ 9D1E
274++ 9D1E              SET_C_COLOR_E:
275++ 9D1E 3E 0F            LD A, 1*8+7
276++ 9D20 CD 12 9D         CALL INC_HL_3X3
277++ 9D23 CD 12 9D         CALL INC_HL_3X3
278++ 9D26 CD 12 9D         CALL INC_HL_3X3
279++ 9D29 C9               RET
280++ 9D2A
281++ 9D2A              CONVERT_58_2_40 ; CONVIERTE UNA DIRECCION DE MEMORIA QUE COMIENZA CON $58XX A $40XX
282++ 9D2A 01 00 E8         LD BC, $E800
283++ 9D2D 09               ADD HL, BC
284++ 9D2E F1               POP AF
284++ 9D2F D1             POP DE
284++ 9D30 E1             POP HL
284++ 9D31 C1             POP BC
285++ 9D32 C9               RET
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\pantalla_juego.asm
  3+  9D33
  4+  9D33              GB_BIENVENIDA:
  5+  9D33 D5               PUSH DE
  5+  9D34 E5             PUSH HL
  5+  9D35 C5             PUSH BC
  5+  9D36 F5             PUSH AF
  6+  9D37
  7+  9D37 11 00 40         LD DE, $4000
  8+  9D3A 21 0A 80         LD HL, PANTALLA_BIENVENIDA
  9+  9D3D 01 00 1B         LD BC, $5B00 - $4000
 10+  9D40              BIENVENIDA_BUCLE:
 11+  9D40 ED B0            LDIR
 12+  9D42 F1               POP AF
 12+  9D43 C1             POP BC
 12+  9D44 E1             POP HL
 12+  9D45 D1             POP DE
 13+  9D46 C9               RET
 14+  9D47
 15+  9D47              GB_ADIOS:
 16+  9D47 CD 56 9D         CALL PTLLA_NEGRA
 17+  9D4A C9               RET
 18+  9D4B
 19+  9D4B              GB_FIN_NEXT:
 20+  9D4B CD 56 9D         CALL PTLLA_NEGRA
 21+  9D4E C9               RET
 22+  9D4F
 23+  9D4F              GB_PTLLA_INICIO_DE_JUEGO:
 24+  9D4F CD 56 9D         CALL PTLLA_NEGRA
 25+  9D52 CD 0A 9B         CALL SCR_PTLLA_JUEGO
 26+  9D55 C9               RET
 27+  9D56
 28+  9D56
 29+  9D56              PTLLA_NEGRA:
 30+  9D56 C5               PUSH BC
 30+  9D57 D5             PUSH DE
 30+  9D58 E5             PUSH HL
 30+  9D59 F5             PUSH AF
 31+  9D5A
 32+  9D5A 21 00 58         LD   HL,$5800
 33+  9D5D 11 01 58         LD   DE,$5801
 34+  9D60 36 00            LD   (HL),0
 35+  9D62 01 FF 02         LD   BC,768-1
 36+  9D65 ED B0            LDIR
 37+  9D67
 38+  9D67 F1               POP AF
 38+  9D68 E1             POP HL
 38+  9D69 D1             POP DE
 38+  9D6A C1             POP BC
 39+  9D6B C9               RET
 40+  9D6C
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_basic.asm
 21   9D6C                  INCLUDE "graphics_core.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_core.asm
  1+  9D6C              GC_COLOR_JUGADOR_ACTUAL:
  2+  9D6C              ; SET_C_COLOR_R:
  3+  9D6C              ;     LD A, 1*8+2
  4+  9D6C              ;     CALL INC_HL_3X3
  5+  9D6C              ;     CALL INC_HL_3X3
  6+  9D6C              ;     CALL INC_HL_3X3
  7+  9D6C              ;     RET
  8+  9D6C
  9+  9D6C              ; SET_C_COLOR_Y: ; LA RUTINA CAMBIA EL COLOR DE UN DETERMINADO BLOQUE 3X3 A AMARILLO
 10+  9D6C              ;     LD A, 1*8+6
 11+  9D6C              ;     CALL INC_HL_3X3
 12+  9D6C              ;     CALL INC_HL_3X3
 13+  9D6C              ;     CALL INC_HL_3X3
 14+  9D6C              ;     RET
 15+  9D6C
 16+  9D6C              ; ; SET_PRED ; Rutina para indicar que el jugador actual es el rojo
 17+  9D6C              ; ;     LD HL, $5845
 18+  9D6C              ; ;     LD A, 2
 19+  9D6C              ; ;     CALL INC_HL_3X3
 20+  9D6C              ; ;     CALL INC_HL_3X3
 21+  9D6C              ; ;     CALL INC_HL_3X3
 22+  9D6C              ; ;     LD HL, $5845
 23+  9D6C              ; ;     CALL CONVERT_58_2_40
 24+  9D6C              ; ;     CALL DRAW_CIRCLE
 25+  9D6C              ; ;     RET
 26+  9D6C
 27+  9D6C              ; ; SET_PYEL ; Rutina para indicar que el jugador actual es el amarillo
 28+  9D6C              ; ;     LD HL, $5857
 29+  9D6C              ; ;     LD A, 6
 30+  9D6C              ; ;     CALL INC_HL_3X3
 31+  9D6C              ; ;     CALL INC_HL_3X3
 32+  9D6C              ; ;     CALL INC_HL_3X3
 33+  9D6C              ; ;     LD HL, $5857
 34+  9D6C              ; ;     CALL CONVERT_58_2_40
 35+  9D6C              ; ;     CALL DRAW_CIRCLE
 36+  9D6C              ; ;     RET
 37+  9D6C
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\graphics_core.asm
 22   9D6C                  INCLUDE "keyboard.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\keyboard.asm
  1+  9D6C              K_SON: ; LECTURA DE TECLADO PARA S O N
  2+  9D6C 0E FE            LD C, $FE
  3+  9D6E              KSON_BUCLE:
  4+  9D6E 06 FD            LD B, $FD
  5+  9D70 ED 78            IN A, (C)
  6+  9D72 CB 4F            BIT 1, A
  7+  9D74 28 0E            JR Z, KSON_S
  8+  9D76
  9+  9D76 06 7F            LD B, $7F
 10+  9D78 ED 78            IN A, (C)
 11+  9D7A CB 5F            BIT 3, A
 12+  9D7C 28 02            JR Z, KSON_N
 13+  9D7E
 14+  9D7E 20 EE            JR NZ, KSON_BUCLE
 15+  9D80
 16+  9D80              KSON_N:
 17+  9D80 16 4E            LD D, "N"
 18+  9D82 18 02            JR KSON_RELEASE
 19+  9D84
 20+  9D84              KSON_S:
 21+  9D84 16 53            LD D, "S"
 22+  9D86
 23+  9D86              KSON_RELEASE:
 24+  9D86 ED 78            IN A, (C)
 25+  9D88 E6 1F            AND $1F
 26+  9D8A FE 1F            CP $1F
 27+  9D8C 20 F8            JR NZ, KSON_RELEASE
 28+  9D8E
 29+  9D8E C9               RET ; FIN DE KSON
 30+  9D8F
 31+  9D8F
 32+  9D8F              K_LR_ENTER: ; LECTURA DE TECLADO PARA Q (LEFT) W (RIGHT) O ENTER (SOLTAR FICHA)
 33+  9D8F 0E FE            LD C, $FE
 34+  9D91
 35+  9D91              KLRE_BUCLE:
 36+  9D91 06 FB            LD B, $FB
 37+  9D93 ED 78            IN A, (C)
 38+  9D95 CB 47            BIT 0, A
 39+  9D97 28 0E            JR Z, KLRE_Q
 40+  9D99 CB 4F            BIT 1, A
 41+  9D9B 28 17            JR Z, KLRE_W
 42+  9D9D
 43+  9D9D 06 BF            LD B, $BF
 44+  9D9F ED 78            IN A, (C)
 45+  9DA1 CB 47            BIT 0, A
 46+  9DA3 28 13            JR Z, KLRE_ENTER
 47+  9DA5
 48+  9DA5 18 EA            JR KLRE_BUCLE
 49+  9DA7
 50+  9DA7              KLRE_Q:
 51+  9DA7 16 51            LD D, 'Q'
 52+  9DA9
 53+  9DA9              KLRE_RELEASE_QW:
 54+  9DA9 06 FB            LD B, $FB
 55+  9DAB ED 78            IN A, (C)
 56+  9DAD E6 1F            AND $1F
 57+  9DAF FE 1F            CP $1F
 58+  9DB1 20 F6            JR NZ, KLRE_RELEASE_QW
 59+  9DB3 C9               RET
 60+  9DB4
 61+  9DB4              KLRE_W:
 62+  9DB4 16 57            LD D, 'W'
 63+  9DB6 18 F1            JR KLRE_RELEASE_QW
 64+  9DB8
 65+  9DB8              KLRE_ENTER:
 66+  9DB8 16 0D            LD D, 13 ; ASCII PARA ENTER EN ZXSPECTRUM48
 67+  9DBA
 68+  9DBA              KLRE_RELEASE_ENTER:
 69+  9DBA 06 BF            LD B, $BF
 70+  9DBC ED 78            IN A, (C)
 71+  9DBE E6 1F            AND $1F
 72+  9DC0 FE 1F            CP $1F
 73+  9DC2 20 F6            JR NZ, KLRE_RELEASE_ENTER
 74+  9DC4 C9               RET ; FIN DE LECTURA Q W ENTER
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\keyboard.asm
 23   9DC5                  INCLUDE "logic_checks.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm
  1+  9DC5              ULTIMA_FICHA_COLUMNA EQU $C001 ; Byte (0-6) de la última columna jugada
  2+  9DC5              ULTIMA_FICHA_FILA EQU $C002    ; Byte (0-5) de la última fila jugada
  3+  9DC5              TABLERO_ANCHO EQU 7
  4+  9DC5              TABLERO_ALTO EQU 6
  5+  9DC5              ESTADO_TABLERO EQU $D000
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(6): error: Expression error:
  6+  9DC5              JUGADOR_aCTUAL EQU
  7+  9DC5
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(8): warning: Label has different value in pass 3: previous value 40547 not equal 40389
  8+  9DC5              LC_COMPROBAR_FIN:
  9+  9DC5 F5               PUSH AF
  9+  9DC6 C5             PUSH BC
  9+  9DC7 D5             PUSH DE
  9+  9DC8 DD E5          PUSH IX
 10+  9DCA                  ; VERIFICACIONES
 11+  9DCA CD 07 9E         CALL LC_CHECK_VERTICAL
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(12): error: [JR] Target out of range (+140)
 12+  9DCD 38 00            JR C, FIN_DE_JUEGO_DETECTADO
 13+  9DCF
 14+  9DCF CD 21 9E         CALL LC_CHECK_HORIZONTAL
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(15): error: [JR] Target out of range (+135)
 15+  9DD2 38 00            JR C, FIN_DE_JUEGO_DETECTADO
 16+  9DD4
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(17): error: Label not found: LC_CHECK_DIAGONAL1
 17+  9DD4 CD 00 00         CALL LC_CHECK_DIAGONAL1
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(18): error: [JR] Target out of range (+130)
 18+  9DD7 38 00            JR C, FIN_DE_JUEGO_DETECTADO
 19+  9DD9
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(20): error: Label not found: LC_CHECK_DIAGONAL2
 20+  9DD9 CD 00 00         CALL LC_CHECK_DIAGONAL2
 21+  9DDC 38 7D            JR C, FIN_DE_JUEGO_DETECTADO
 22+  9DDE
 23+  9DDE                  ; COMPROBAR SI HA GANADO UN JUGADOR
 24+  9DDE
 25+  9DDE                  ; COMPROBAR SI HAY EMPATE
 26+  9DDE              LC_COMPROBAR_4ENLINEA:
 27+  9DDE F5               PUSH AF
 27+  9DDF C5             PUSH BC
 27+  9DE0 D5             PUSH DE
 27+  9DE1 DD E5          PUSH IX
 28+  9DE3 0E 04            LD C,4  ; CONTADOR DE FICHAS A COMPROBAR
 29+  9DE5 1E 00            LD E,0  ; CONTADOR DE FICHAS SEGUIDAS
 30+  9DE7              COMPROBAR_BUCLE:
 31+  9DE7 56               LD D, (HL)  ; CARGAR COLOR DE LA CASILLA
 32+  9DE8 BA               CP D    ; COMPARAR CON EL COLOR DEL JUGADOR ACTUAL
 33+  9DE9 20 1A            JR NZ, NO_COINCIDE
 34+  9DEB
 35+  9DEB 1C               INC E   ; SI COINCIDE, INCREMENTA EL CONTADOR
 36+  9DEC 16 04            LD D,4  ; NUMERO DE FICHAS NECESARIAS PARA GANAR
 37+  9DEE BB               CP E    ; PARA VER SI LLEVAMOS 4 SEGUIDAS
 38+  9DEF 28 13            JR Z, HAY_VICTORIA
 39+  9DF1 18 00            JR COINCIDE_SIGUIENTE
 40+  9DF3
 41+  9DF3              COINCIDE_SIGUIENTE:
 42+  9DF3 C5               PUSH BC
 43+  9DF4 06 00            LD B,0  ; BC = SALTO
 44+  9DF6 48               LD C,B  ; C = B (SALTO)
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(45): error: [ADD] Comma expected
 45+  9DF7                  ADD HL  ; HL = HL + SALTO
 46+  9DF7 C1               POP BC
 47+  9DF8
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(48): error: Syntax error: , COMPROBAR_BUCLE
 48+  9DF8 10 00 10 EB      DJNZ, COMPROBAR_BUCLE   ; SE REPITE 4 VECES (O LAS QUE SEAN NECESARIAS)
 49+  9DFC
 50+  9DFC A7               AND A   ; LIMPIAR CARRY SI EL BUCLE TERMINA SIN VICTORIA
 51+  9DFD 18 00            JR FINALIZAR_CHECK
 52+  9DFF
 53+  9DFF              FINALIZAR_CHECK:
 54+  9DFF DD E1            POP IX
 54+  9E01 D1             POP DE
 54+  9E02 E1             POP HL
 55+  9E03 C9               RET
 56+  9E04              HAY_VICTORIA:
 57+  9E04 37               SCF ; ACTIVA EL CARRY
 58+  9E05              NO_COINCIDE:
 59+  9E05 1E 00            LD E,0  ; REINICIA EL CONTADOR DE FICHAS SEGUIDAS
 60+  9E07
 61+  9E07
 62+  9E07              ; SE COMPRUEBAN LAS POSICIONES DE LAS FICHAS VERTICAL, HORIZONTAL, DIAGONAL IZQ Y DIAGONAL DER
 63+  9E07
 64+  9E07              LC_CHECK_VERTICAL:
 65+  9E07              ; SE COMPRUEBA HACIA ABAJO SOLO
 66+  9E07 3A 02 C0         LD A, (ULTIMA_FICHA_FILA)
 67+  9E0A 06 07            LD B, TABLERO_ANCHO
 68+  9E0C CD 4B 9E         CALL MULTIPLY_A_B ; HL = FILA POR ANCHO
 69+  9E0F 3A 01 C0         LD A, (ULTIMA_FICHA_COLUMNA)
 70+  9E12 85               ADD L   ; HL = FILA*ANCHO + COLUMNA
 71+  9E13 21 00 D0         LD HL, ESTADO_TABLERO
 72+  9E16 19               ADD HL, DE  ; HL = DIRECCION DE LA ULTIMA FICHA
 73+  9E17
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(74): error: Illegal instruction:     LD A, ; AQUI IRIA EL JUGADOR ACTUAL
 74+  9E17                  LD A, ; AQUI IRIA EL JUGADOR ACTUAL
 75+  9E17 06 07            LD B, TABLERO_ANCHO
 76+  9E19
 77+  9E19 CD DE 9D         CALL LC_COMPROBAR_4ENLINEA
 78+  9E1C
 79+  9E1C E1               POP HL
 79+  9E1D D1             POP DE
 79+  9E1E C1             POP BC
 79+  9E1F F1             POP AF
 80+  9E20 C9               RET
 81+  9E21
 82+  9E21              ; SE COMPRUEBA 4 FICHAS SEGUIDAS
 83+  9E21              LC_CHECK_HORIZONTAL:
 84+  9E21 F5               PUSH AF
 84+  9E22 C5             PUSH BC
 84+  9E23 D5             PUSH DE
 84+  9E24 E5             PUSH HL
 85+  9E25                  ; SE CALCULA POSICION INICIAL DE LA FILA
 86+  9E25 3A 02 C0         LD A, (ULTIMA_FICHA_FILA)
 87+  9E28 06 07            LD B, TABLERO_ANCHO
 88+  9E2A CD 4B 9E         CALL MULTIPLY_A_B
 89+  9E2D 21 00 D0         LD HL, ESTADO_TABLERO
 90+  9E30 19               ADD HL, DE
 91+  9E31 0E 04            LD C,4  ; BUCLE DE 4 REPETICIONES
 92+  9E33
 93+  9E33              HORIZONTAL_BUCLE:
 94+  9E33 E5               PUSH HL
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(95): error: Illegal instruction:     LD A, ; AQUI LA DIRECCION DE MEMORIA DEL JUGADOR ACTUAL (EL COLOR A BUSCAR)
 95+  9E34                  LD A, ; AQUI LA DIRECCION DE MEMORIA DEL JUGADOR ACTUAL (EL COLOR A BUSCAR)
 96+  9E34 06 01            LD B,1  ; SALTO HORIZONTAL = 1 BYTE
 97+  9E36 CD DE 9D         CALL LC_COMPROBAR_4ENLINEA
 98+  9E39
 99+  9E39 E1               POP HL
100+  9E3A 38 09            JR C, HORIZONTAL_VICTORIA   ; SI ES VICTORIA, SALIR
101+  9E3C
102+  9E3C 23               INC HL  ; COLUMNA + 1
103+  9E3D 10 F4            DJNZ HORIZONTAL_BUCLE
104+  9E3F
105+  9E3F              HORIZONTAL_SIN_VICTORIA:
106+  9E3F A7               AND A   ; C=0
107+  9E40 E1               POP HL
107+  9E41 D1             POP DE
107+  9E42 C1             POP BC
107+  9E43 F1             POP AF
108+  9E44 C9               RET
109+  9E45              HORIZONTAL_VICTORIA:
110+  9E45 37               SCF
111+  9E46 E1               POP HL
111+  9E47 D1             POP DE
111+  9E48 C1             POP BC
111+  9E49 F1             POP AF
112+  9E4A C9               RET
113+  9E4B              MULTIPLY_A_B:
114+  9E4B F5               PUSH AF
114+  9E4C C5             PUSH BC
115+  9E4D 21 00 00         LD HL, 0
116+  9E50 4F               LD C,A
117+  9E51 3E 00            LD A,0  ; CONTADOR
118+  9E53              MULT_BUCLE:
119+  9E53 09               ADD HL,BC
120+  9E54 3C               INC A
121+  9E55 B9               CP C
122+  9E56 20 FB            JR NZ, MULT_BUCLE
123+  9E58 C1               POP BC
123+  9E59 F1             POP AF
124+  9E5A C9               RET
125+  9E5B              FIN_DE_JUEGO_DETECTADO:
126+  9E5B 3E 00            LD A,0
127+  9E5D F1               POP AF
127+  9E5E C1             POP BC
127+  9E5F D1             POP DE
127+  9E60 DD E1          POP IX
128+  9E62 C9               RET
129+  9E63              LC_VALIDPLAY:
130+  9E63
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm(131): warning: Label has different value in pass 3: previous value 40389 not equal 40547
131+  9E63              LC_COMPROBAR_FIN:
132+  9E63
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_checks.asm
 24   9E63                  INCLUDE "logic_flow.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_flow.asm
  1+  9E63              LF_ESPERAR:
  2+  9E63 C5               PUSH BC
  3+  9E64 F5               PUSH AF
  4+  9E65 01 FF 00         LD BC, CONTADOR
  5+  9E68              LF_ESPERAR1:
  6+  9E68 0B               DEC BC ; 6C
  7+  9E69 78               LD A, B ; 4C
  8+  9E6A B1               OR C ; 4C
  9+  9E6B 00               NOP ; 4C
C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_flow.asm(10): error: [JR] Target out of range (+1182)
 10+  9E6C 20 00            JR NZ, ESPERAR1 ; 12C
 11+  9E6E                  ; DURACION TOTAL = APPROX 0,49 SEG
 12+  9E6E F1               POP AF
 13+  9E6F C1               POP BC
 14+  9E70 C9               RET
 15+  9E71              LF_INICIALIZACION:
 16+  9E71              LF_SWITCH_JUGADOR:
 17+  9E71              LF_VALIDPLAY:
 18+  9E71
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\logic_flow.asm
 25   9E71                  INCLUDE "variables.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\variables.asm
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\variables.asm
 26   9E71                  INCLUDE "printat.asm"
# file opened: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\printat.asm
  1+  9E71              ; -------------------------------
  2+  9E71              ; ZX Spectrum Text print library
  3+  9E71              ; Daniel León - AOC - UFV 2020
  4+  9E71              ; -------------------------------
  5+  9E71
  6+  9E71
  7+  9E71              ; ----------------------------------------------------------------------------------------
  8+  9E71              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  9E71              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  9E71              ;		IN	B	: Row 0..23
 11+  9E71              ;		IN	C	: Column 0..31
 12+  9E71              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  9E71              ; ----------------------------------------------------------------------------------------
 14+  9E71 CD 80 9E     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  9E74              ; ----------------------------------------------------------------------------------------
 16+  9E74              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  9E74              ; ----------------------------------------------------------------------------------------
 18+  9E74              ; PRINTSTR - Prints String - IX Points to the String start
 19+  9E74              ; ----------------------------------------------------------------------------------------
 20+  9E74 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  9E77 B7           			OR A						; check for end of string (0)
 22+  9E78 C8           			RET Z						; Finish printing if 0
 23+  9E79 CD AE 9E     			CALL PRINTCHNUM
 24+  9E7C DD 23        			INC IX						; Move to next char in string
 25+  9E7E 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  9E80              ; ----------------------------------------------------------------------------------------
 27+  9E80
 28+  9E80
 29+  9E80              ;-----------------------------------------------------------------------------------------
 30+  9E80              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  9E80              ;-----------------------------------------------------------------------------------------
 32+  9E80 32 F4 9E     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  9E83 CD 89 9E     PREP_PRT_2:	CALL CRtoSCREEN
 34+  9E86 C3 9B 9E     			JP CRtoATTR
 35+  9E89              ;-----------------------------------------------------------------------------------------
 36+  9E89
 37+  9E89              ;-----------------------------------------------------------------------------------------
 38+  9E89              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  9E89              ;	IN  - B=Row, C=Column
 40+  9E89              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  9E89              ;	Conversion:
 42+  9E89              ;			Row FFfff   Column CCCCC
 43+  9E89              ;			HL=%010FF000 fffCCCCC
 44+  9E89              ;-----------------------------------------------------------------------------------------
 45+  9E89              CRtoSCREEN:
 46+  9E89 78           			LD A,B						; %___FFfff
 47+  9E8A F6 40        			OR #40						; %010FFfff
 48+  9E8C E6 F8        			AND #F8						; %010FF000
 49+  9E8E 67           			LD H,A
 50+  9E8F
 51+  9E8F 78           			LD A,B						; %___FFfff
 52+  9E90 E6 07        			AND #7						; %00000fff
 53+  9E92 0F           			RRCA						; %f00000ff
 54+  9E93 0F           			RRCA						; %ff00000f
 55+  9E94 0F           			RRCA						; %fff00000
 56+  9E95 B1           			OR C						; %fffCCCCC
 57+  9E96 6F           			LD L,A
 58+  9E97 22 F0 9E                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  9E9A C9                       RET
 60+  9E9B              ; ----------------------------------------------------------------------------------------
 61+  9E9B
 62+  9E9B
 63+  9E9B
 64+  9E9B              ;-----------------------------------------------------------------------------------------
 65+  9E9B              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  9E9B              ;	IN  - B=Row, C=Column
 67+  9E9B              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  9E9B              ;	Conversion:
 69+  9E9B              ;			Row FFfff   Column CCCCC
 70+  9E9B              ;			HL=%010110FF fffCCCCC
 71+  9E9B              ;-----------------------------------------------------------------------------------------
 72+  9E9B              CRtoATTR:
 73+  9E9B 78           			LD A,B						; %___FFfff
 74+  9E9C 0F           			RRCA						; %f000FFff
 75+  9E9D 0F           			RRCA						; %ff000FFf
 76+  9E9E 0F           			RRCA						; %fff000FF
 77+  9E9F 6F           			LD L,A
 78+  9EA0 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  9EA2 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  9EA4 67           			LD H,A
 81+  9EA5
 82+  9EA5 7D           			LD A,L						; %fff000FF
 83+  9EA6 E6 E0        			AND #E0						; %fff00000
 84+  9EA8 B1           			OR C						; %fffCCCCC
 85+  9EA9 6F           			LD L,A
 86+  9EAA
 87+  9EAA 22 F2 9E                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  9EAD C9                       RET
 89+  9EAE              ; ----------------------------------------------------------------------------------------
 90+  9EAE
 91+  9EAE
 92+  9EAE
 93+  9EAE              ; ----------------------------------------------------------------------------------------
 94+  9EAE              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  9EAE              ;-----------------------------------------------------------------------------------------
 96+  9EAE              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  9EAE 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  9EB0 6F           			LD L,A
 99+  9EB1 29           			ADD HL,HL
100+  9EB2 29           			ADD HL,HL
101+  9EB3 29           			ADD HL,HL
102+  9EB4 11 F5 9D     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  9EB7 19           			ADD HL,DE
104+  9EB8 EB           			EX  DE,HL					;Value in DE
105+  9EB9              			; Continues to printchar below
106+  9EB9              ; ----------------------------------------------------------------------------------------
107+  9EB9
108+  9EB9
109+  9EB9              ; ----------------------------------------------------------------------------------------
110+  9EB9              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  9EB9              ; ----------------------------------------------------------------------------------------
112+  9EB9              PRINTCHAR:
113+  9EB9 06 08        			LD B,8						; 8 Lines per char
114+  9EBB 2A F0 9E                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  9EBE
116+  9EBE 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  9EBF 77           			LD (HL),A					; Move to Printing location
118+  9EC0 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  9EC1 13                       INC DE 						; next line to be printed
120+  9EC2 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  9EC4 3A F4 9E                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  9EC7 2A F2 9E                 LD HL, (SCR_ATTR_PTR)
123+  9ECA 77                       LD (HL),A
124+  9ECB 21 F2 9E                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  9ECE 34                       INC (HL)					; Move Attribute cursor to next char
126+  9ECF 21 F0 9E     			LD HL, SCR_CUR_PTR
127+  9ED2 34           			INC (HL)					; update Cursor pointer to next position
128+  9ED3 C9                       RET
129+  9ED4              ; ----------------------------------------------------------------------------------------
130+  9ED4
131+  9ED4
132+  9ED4
133+  9ED4              ; ----------------------------------------------------------------------------------------
134+  9ED4              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  9ED4              ; 				Sets bright 1 and flash 0
136+  9ED4              ; ----------------------------------------------------------------------------------------
137+  9ED4 3A F4 9E     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  9ED7 E6 07                    AND 7						; get Attr INK in A
139+  9ED9 07           			RLCA
140+  9EDA 07           			RLCA
141+  9EDB 07           			RLCA						; move Ink to Paper
142+  9EDC F6 40        			OR 64						; ink 0 bright 1
143+  9EDE 32 F4 9E     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  9EE1 C9           			RET
145+  9EE2              ; ----------------------------------------------------------------------------------------
146+  9EE2
147+  9EE2
148+  9EE2
149+  9EE2
150+  9EE2 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  9EE5 11 01 40     			LD DE,$4001
152+  9EE8 01 FF 1A     			LD BC,6911
153+  9EEB 36 00        			LD (HL),0
154+  9EED ED B0        			LDIR
155+  9EEF C9           			RET
156+  9EF0
157+  9EF0
158+  9EF0              SCR_CUR_PTR
158+  9EF0 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  9EF2 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  9EF4 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  9EF5
162+  9EF5              CHARSET: incbin "charset.bin"			; Charset used
163+  A1F5
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\printat.asm
 27   A1F5
 28   A1F5              ; STRINGS PARA IMPRESION
 29   A1F5
 30   A1F5 20 20 20 20  STRING_FILA_VACIA_B: DB "                        ", 0
 30   A1F9 20 20 20 20
 30   A1FD 20 20 20 20
 30   A201 20 20 20 20
 30   A205 20 20 20 20
 30   A209 20 20 20 20
 30   A20D 00
 31   A20E 20 42 69 65  STRING_BIENVENIDA: DB " Bienvenido a Conecta 4 ", 0
 31   A212 6E 76 65 6E
 31   A216 69 64 6F 20
 31   A21A 61 20 43 6F
 31   A21E 6E 65 63 74
 31   A222 61 20 34 20
 31   A226 00
 32   A227 20 51 75 69  STRING_JUGAR: DB " Quieres jugar? S/N:   ", 0
 32   A22B 65 72 65 73
 32   A22F 20 6A 75 67
 32   A233 61 72 3F 20
 32   A237 53 2F 4E 3A
 32   A23B 20 20 20 00
 33   A23F 20 20 20 20  STRING_FILA_VACIA_J: DB "                       ", 0
 33   A243 20 20 20 20
 33   A247 20 20 20 20
 33   A24B 20 20 20 20
 33   A24F 20 20 20 20
 33   A253 20 20 20 00
 34   A257 20 20 20 20  STRING_FILA_VACIA_A: DB "            ", 0
 34   A25B 20 20 20 20
 34   A25F 20 20 20 20
 34   A263 00
 35   A264 20 20 41 44  STRING_ADIOS: DB "  ADIOS!!!! ", 0
 35   A268 49 4F 53 21
 35   A26C 21 21 21 20
 35   A270 00
 36   A271 20 4C 41 20  STRING_FIN: DB " LA PARTIDA HA FINALIZADO ", 0
 36   A275 50 41 52 54
 36   A279 49 44 41 20
 36   A27D 48 41 20 46
 36   A281 49 4E 41 4C
 36   A285 49 5A 41 44
 36   A289 4F 20 00
 37   A28C 51 55 49 45  STRING_OTRA: DB "QUIERES JUGAR OTRA VEZ? S/N: ", 0
 37   A290 52 45 53 20
 37   A294 4A 55 47 41
 37   A298 52 20 4F 54
 37   A29C 52 41 20 56
 37   A2A0 45 5A 3F 20
 37   A2A4 53 2F 4E 3A
 37   A2A8 20 00
 38   A2AA 00 00        CHAR_CARACTER: DB 0, 0
 39   A2AC
 40   A2AC              ; INICIO DEL FLUJO DEL PROGRAMA FUNCIONAL
 41   A2AC              INICIO:
 42   A2AC CD 33 9D         CALL GB_BIENVENIDA
 43   A2AF CD 2D A3         CALL PRINT_BIENVENIDA
 44   A2B2 CD 6C A3         CALL BLINKER_JUGAR
 45   A2B5 CD 6C 9D         CALL K_SON
 46   A2B8 7A               LD A, D
 47   A2B9 32 AA A2         LD (CHAR_CARACTER), A
 48   A2BC 3E 06            LD A, COLOR_TEXTO_AMARILLO
 49   A2BE CD 77 A3         CALL PRINT_CHAR_SON
 50   A2C1 3A AA A2         LD A, (CHAR_CARACTER)
 51   A2C4 FE 53            CP 'S'
 52   A2C6 CC ED A2         CALL Z, LOGICA_JUEGO
 53   A2C9 FE 4E            CP 'N'
 54   A2CB CC CE A2         CALL Z, ADIOS
 55   A2CE
 56   A2CE              ADIOS:
 57   A2CE CD 47 9D         CALL GB_ADIOS
 58   A2D1 CD 83 A3         CALL PRINT_ADIOS
 59   A2D4              FINAL:
 60   A2D4 06 0A            LD B, 10
 61   A2D6 CD 07 A3         CALL ESPERAR
 62   A2D9 10 F9            DJNZ FINAL
 63   A2DB 76               HALT
 64   A2DC
 65   A2DC              FIN_NEXT: ; TERMINO LA PARTIDA, OFRECEMOS OTRA O FINALIZAR
 66   A2DC CD 4B 9D         CALL GB_FIN_NEXT
 67   A2DF CD 6C 9D         CALL K_SON
 68   A2E2 7A               LD A, D
 69   A2E3 FE 53            CP 'S'
 70   A2E5 CC ED A2         CALL Z, LOGICA_JUEGO
 71   A2E8 FE 4E            CP 'N'
 72   A2EA CC CE A2         CALL Z, ADIOS
 73   A2ED
 74   A2ED              LOGICA_JUEGO:
 75   A2ED CD 4F 9D         CALL GB_PTLLA_INICIO_DE_JUEGO
 76   A2F0 76               HALT
 77   A2F1 CD 71 9E         CALL LF_INICIALIZACION
 78   A2F4              BUCLE_JUEGO:
 79   A2F4 CD 71 9E         CALL LF_SWITCH_JUGADOR
 80   A2F7              GESTIONAR_JUGADA:
 81   A2F7 CD 6C 9D         CALL GC_COLOR_JUGADOR_ACTUAL
 82   A2FA CD 8F 9D         CALL K_LR_ENTER
 83   A2FD CD 63 9E         CALL LC_VALIDPLAY
 84   A300                  ; SI SE DETECTO LEFT
 85   A300                  ; CALL (CONDICION DE DETECCION), GC_LEFT
 86   A300                  ; SI SE DETECTO RIGHT
 87   A300                  ; CALL (CONDICION DE DETECCION), GC_RIGHT
 88   A300                  ; SI SE DETECTO ENTER
 89   A300                  ; CALL (CONDICION DE DETECCION), GC_ENTER
 90   A300              COMPROBAR_FIN_JUEGO:
 91   A300 CD 63 9E         CALL LC_COMPROBAR_FIN
 92   A303                  ; SI SE DETECTO EL FIN DEL JUEGO
 93   A303                  ; JR (CONDICION DE FIN), FIN_NEXT
 94   A303                  ; SI SE DETECTA QUE EL JUEGO SIGUE
 95   A303 28 D7            JR Z, FIN_NEXT
 96   A305 18 ED            JR BUCLE_JUEGO
 97   A307
 98   A307              ESPERAR:
 99   A307 C5               PUSH BC
100   A308 F5               PUSH AF
101   A309 01 FF 00         LD BC, CONTADOR
102   A30C              ESPERAR1:
103   A30C 0B               DEC BC ; 6C
104   A30D 78               LD A, B ; 4C
105   A30E B1               OR C ; 4C
106   A30F 00               NOP ; 4C
107   A310 20 FA            JR NZ, ESPERAR1 ; 12C
108   A312                  ; DURACION TOTAL = APPROX 0,49 SEG
109   A312 F1               POP AF
110   A313 C1               POP BC
111   A314 C9               RET
112   A315
113   A315              COORD_ATRIB:
114   A315                  ; PREREQUISITO: HABER SELECCIONADO UNA FILA Y UNA COLUMNA (H Y L) SOBRE LA QUE SE QUIERE OBTENER UNA DIRECCIÓN VIDEORAM
115   A315                  ; H = FILA
116   A315                  ; L = COLUMNA
117   A315                  ; HL = DIRECCIÓN DE LA VIDEORAM
118   A315
119   A315 F5               PUSH AF
120   A316 7C               LD A, H ; 0 0 0 H4 H3 H2 H1 H0
121   A317 CB 27            SLA A
121   A319 CB 27          SLA A
121   A31B CB 27          SLA A
121   A31D CB 27          SLA A
121   A31F CB 27          SLA A ; H2 H1 H0 0 0 0 0 0
122   A321 B5               OR L ; H2 H1 H0 L4 L3 L2 L1 L0
123   A322 7C               LD A, H ; 0 0 0 H4 H3 H2 H1 H0
124   A323 CB 2F            SRA A
124   A325 CB 2F          SRA A
124   A327 CB 2F          SRA A; 0 0 0 0 0 0 H4 H3
125   A329 F6 58            OR $58 ; 0 1 0 1 1 0 H4 H3
126   A32B                  ; HL = 0 1 0 1 1 0 H4 H3 H2 H1 H0 L4 L3 L2 L1 L0
127   A32B F1               POP AF
128   A32C C9               RET
129   A32D
130   A32D              PRINT_BIENVENIDA:
131   A32D 06 01            LD B, 1
132   A32F 0E 04            LD C, 4
133   A331 DD 21 F5 A1      LD IX, STRING_FILA_VACIA_B
134   A335 CD 71 9E         CALL PRINTAT
135   A338 06 03            LD B, 3
136   A33A DD 21 F5 A1      LD IX, STRING_FILA_VACIA_B
137   A33E CD 71 9E         CALL PRINTAT
138   A341 06 02            LD B, 2
139   A343 3E 02            LD A, COLOR_TEXTO_ROJO
140   A345 DD 21 0E A2      LD IX, STRING_BIENVENIDA
141   A349 CD 71 9E         CALL PRINTAT
142   A34C
143   A34C 06 14            LD B, 20
144   A34E 0E 01            LD C, 1
145   A350 DD 21 3F A2      LD IX, STRING_FILA_VACIA_J
146   A354 CD 71 9E         CALL PRINTAT
147   A357 06 16            LD B, 22
148   A359 DD 21 3F A2      LD IX, STRING_FILA_VACIA_J
149   A35D CD 71 9E         CALL PRINTAT
150   A360 06 15            LD B, 21
151   A362 3E 06            LD A, COLOR_TEXTO_AMARILLO
152   A364 DD 21 27 A2      LD IX, STRING_JUGAR
153   A368 CD 71 9E         CALL PRINTAT
154   A36B
155   A36B C9               RET
156   A36C
157   A36C              BLINKER_JUGAR:
158   A36C 06 15            LD B, 21
159   A36E 0E 11            LD C, 17
160   A370 21 B6 5A         LD HL, $5800 + 21*NUM_COLS + 22
161   A373 3E B0            LD A, BLINK + 8*COLOR_TEXTO_AMARILLO
162   A375 77               LD (HL), A
163   A376
164   A376 C9               RET
165   A377
166   A377              PRINT_CHAR_SON:
167   A377 06 15            LD B, 21
168   A379 0E 16            LD C, 22
169   A37B DD 21 AA A2      LD IX, CHAR_CARACTER
170   A37F CD 71 9E         CALL PRINTAT
171   A382
172   A382 C9               RET
173   A383
174   A383              PRINT_ADIOS:
175   A383
176   A383 06 0A            LD B, 10
177   A385 0E 0A            LD C, 10
178   A387 3E 10            LD A, 8*COLOR_TEXTO_ROJO
179   A389 DD 21 57 A2      LD IX, STRING_FILA_VACIA_A
180   A38D CD 71 9E         CALL PRINTAT
181   A390 06 0C            LD B, 12
182   A392 3E 10            LD A, 8*COLOR_TEXTO_ROJO
183   A394 DD 21 57 A2      LD IX, STRING_FILA_VACIA_A
184   A398 CD 71 9E         CALL PRINTAT
185   A39B 06 0B            LD B, 11
186   A39D 3E 10            LD A, 8*COLOR_TEXTO_ROJO
187   A39F DD 21 64 A2      LD IX, STRING_ADIOS
188   A3A3 CD 71 9E         CALL PRINTAT
189   A3A6
190   A3A6 C9               RET
191   A3A7
192   A3A7              PRINT_FIN:
193   A3A7
# file closed: C:\Users\luisx\OneDrive - UFV\curso2\AOC\ejerYpruebas\L34-Parte1\main.asm
